
projet_1_software.elf:     file format elf32-littlenios2
projet_1_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080020

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000250c memsz 0x0000250c flags r-x
    LOAD off    0x0000352c vaddr 0x0008252c paddr 0x00082b80 align 2**12
         filesz 0x00000654 memsz 0x00000654 flags rw-
    LOAD off    0x000041d4 vaddr 0x000831d4 paddr 0x000831d4 align 2**12
         filesz 0x00000000 memsz 0x0005ab78 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00080020  00080020  00003b80  2**0
                  CONTENTS
  2 .text         000024ac  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000060  000824cc  000824cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000654  0008252c  00082b80  0000352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0005ac22  000831d4  000831d4  000041d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000ddd4c  000ddd4c  00003b80  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000390  00000000  00000000  00003ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005afe  00000000  00000000  00003f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a1f  00000000  00000000  00009a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001dce  00000000  00000000  0000b455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b98  00000000  00000000  0000d224  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000018a8  00000000  00000000  0000ddbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a6b  00000000  00000000  0000f664  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000100d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  000100e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00011e8e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00011e91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00011e9d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00011e9e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00011e9f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00011ea3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00011ea7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00011eab  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00011eaf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00011eb3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00011eb7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000049  00000000  00000000  00011ebd  2**0
                  CONTENTS, READONLY
 29 .jdi          00003c7d  00000000  00000000  00011f06  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003a653  00000000  00000000  00015b83  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080020 l    d  .text	00000000 .text
000824cc l    d  .rodata	00000000 .rodata
0008252c l    d  .rwdata	00000000 .rwdata
000831d4 l    d  .bss	00000000 .bss
000ddd4c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../projet_1_software_bsp//obj/HAL/src/crt0.o
00080058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00080b80 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00080ccc l     F .text	00000034 alt_dev_reg
0008252c l     O .rwdata	00000030 audio_config
0008255c l     O .rwdata	00000030 audio_codec
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_close.c
00081c20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00081d54 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00081d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00082734 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00081668 g     F .text	00000038 alt_up_av_config_reset
00081ac0 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
000816d8 g     F .text	00000034 alt_up_av_config_disable_interrupt
00080c6c g     F .text	00000060 alt_main
00082b80 g       *ABS*	00000000 __flash_rwdata_start
00081024 g     F .text	00000060 alt_up_audio_read_fifo_avail
0008179c g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
000dd94c g     O .bss	00000100 octave_outputbuffer
00081084 g     F .text	00000068 alt_up_audio_record_r
00080f90 g     F .text	00000094 alt_up_audio_reset_audio_core
000831d8 g     O .bss	00000004 octave_reading_index1
00082054 g     F .text	00000024 altera_nios2_gen2_irq_init
00080924 g     F .text	000000a8 state_select
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
000831f8 g     O .bss	00000004 errno
000802f0 g     F .text	00000144 audio_distortion
0008005c g     F .text	0000011c audio_init
00080f50 g     F .text	00000040 alt_up_audio_write_interrupt_pending
000831f0 g     O .bss	00000004 alt_argv
0008ab58 g       *ABS*	00000000 _gp
000825b4 g     O .rwdata	00000180 alt_fd_list
00081f20 g     F .text	00000090 alt_find_dev
000824cc g       *ABS*	00000000 __DTOR_END__
0008146c g     F .text	00000050 alt_up_audio_read_fifo_head
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080ac4 g     F .text	00000064 .hidden __udivsi3
00082b5c g     O .rwdata	00000004 octave_reading_index2
000815e8 g     F .text	00000080 alt_up_av_config_read_data
000dd84c g     O .bss	00000100 octave_buffer2
000831e4 g     O .bss	00000004 audio_dev
00082b70 g     O .rwdata	00000004 alt_max_fd
000814bc g     F .text	00000068 alt_up_audio_write_fifo_head
00082b78 g     O .rwdata	00000004 _global_impure_ptr
000ddd4c g       *ABS*	00000000 __bss_end
000831fc g     O .bss	0005a550 delay_audio_buffer
00080d7c g     F .text	0000003c alt_up_audio_open_dev
000831e0 g     O .bss	00000004 state
000811b4 g     F .text	00000068 alt_up_audio_play_r
0008258c g     O .rwdata	00000028 alt_dev_null
00081d34 g     F .text	00000020 alt_dcache_flush_all
00082b80 g       *ABS*	00000000 __ram_rwdata_end
00082b68 g     O .rwdata	00000008 alt_dev_list
0008252c g       *ABS*	00000000 __ram_rodata_end
00080b28 g     F .text	00000058 .hidden __umodsi3
000ddd4c g       *ABS*	00000000 end
000dda4c g     O .bss	00000100 r_buf
000824cc g       *ABS*	00000000 __CTOR_LIST__
000ebe90 g       *ABS*	00000000 __alt_stack_pointer
000831e8 g     O .bss	00000004 av_config_dev
000ddb4c g     O .bss	00000100 outgoing_buffer
000822f0 g     F .text	00000180 __call_exitprocs
00080020 g     F .text	0000003c _start
00080178 g     F .text	00000178 audio_no_effect
00081364 g     F .text	00000108 alt_up_audio_write_fifo
00081584 g     F .text	00000064 alt_up_av_config_write_data
00080d38 g     F .text	00000044 alt_sys_init
00081284 g     F .text	000000e0 alt_up_audio_read_fifo
000821d8 g     F .text	00000118 __register_exitproc
00081bc8 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
00080eb8 g     F .text	00000058 alt_up_audio_disable_write_interrupt
00082b58 g     O .rwdata	00000004 reading_audio_index
00082470 g     F .text	00000028 .hidden __mulsi3
0008252c g       *ABS*	00000000 __ram_rwdata_start
000824cc g       *ABS*	00000000 __ram_rodata_start
00080e64 g     F .text	00000054 alt_up_audio_enable_write_interrupt
000820c4 g     F .text	0000007c memcmp
000ddd4c g       *ABS*	00000000 __alt_stack_base
00080664 g     F .text	000002a4 audio_octave
00080e0c g     F .text	00000058 alt_up_audio_disable_read_interrupt
00081dbc g     F .text	000000a4 alt_dev_llist_insert
000831d4 g       *ABS*	00000000 __bss_start
00080908 g     F .text	0000001c main
00081154 g     F .text	00000060 alt_up_audio_write_fifo_space
000831f4 g     O .bss	00000004 alt_envp
00082b74 g     O .rwdata	00000004 alt_errno
000809cc g     F .text	00000084 .hidden __divsi3
00080434 g     F .text	00000230 audio_delay
000824cc g       *ABS*	00000000 __CTOR_END__
000824cc g       *ABS*	00000000 __flash_rodata_start
000831dc g     O .bss	00000004 octave_storing_index
000824cc g       *ABS*	00000000 __DTOR_LIST__
00081524 g     F .text	00000060 alt_up_av_config_open_dev
00080d00 g     F .text	00000038 alt_irq_init
00081fd0 g     F .text	00000084 alt_release_fd
00082078 g     F .text	00000014 atexit
00081764 g     F .text	00000038 alt_up_av_config_read_ready
00082b7c g     O .rwdata	00000004 _impure_ptr
000831ec g     O .bss	00000004 alt_argc
00081ec0 g     F .text	00000060 _do_dtors
000831d4 g     O .bss	00000004 storing_audio_index
00082b60 g     O .rwdata	00000008 alt_fs_list
000810ec g     F .text	00000068 alt_up_audio_record_l
00080020 g       *ABS*	00000000 __ram_exceptions_start
000816a0 g     F .text	00000038 alt_up_av_config_enable_interrupt
0008170c g     F .text	00000058 alt_up_av_config_read_acknowledge
00081a68 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
00082b80 g       *ABS*	00000000 _edata
000ddd4c g       *ABS*	00000000 _end
00080020 g       *ABS*	00000000 __ram_exceptions_end
000ddc4c g     O .bss	00000100 l_buf
0008121c g     F .text	00000068 alt_up_audio_play_l
0008208c g     F .text	00000038 exit
00081b70 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
00080a50 g     F .text	00000074 .hidden __modsi3
000ebe90 g       *ABS*	00000000 __alt_data_end
000dd74c g     O .bss	00000100 octave_buffer1
00082498 g     F .text	00000034 _exit
00082140 g     F .text	00000098 strlen
00081840 g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
00081fb0 g     F .text	00000020 alt_icache_flush_all
00081b18 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
00081e60 g     F .text	00000060 _do_ctors
00081c5c g     F .text	000000d8 close
00080be8 g     F .text	00000084 alt_load
00080db8 g     F .text	00000054 alt_up_audio_enable_read_interrupt
00081928 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
00081a10 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
00080f10 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08400814 	ori	at,at,32
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00080020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80020:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   80024:	deefa414 	ori	sp,sp,48784
    movhi gp, %hi(_gp)
   80028:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   8002c:	d6aad614 	ori	gp,gp,43864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80030:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80034:	108c7514 	ori	r2,r2,12756

    movhi r3, %hi(__bss_end)
   80038:	00c00374 	movhi	r3,13
    ori r3, r3, %lo(__bss_end)
   8003c:	18f75314 	ori	r3,r3,56652

    beq r2, r3, 1f
   80040:	10c00326 	beq	r2,r3,80050 <_start+0x30>

0:
    stw zero, (r2)
   80044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8004c:	10fffd36 	bltu	r2,r3,80044 <__alt_data_end+0xfff941b4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80050:	0080be80 	call	80be8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80054:	0080c6c0 	call	80c6c <alt_main>

00080058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80058:	003fff06 	br	80058 <__alt_data_end+0xfff941c8>

0008005c <audio_init>:




//Audio init, connects
void audio_init(void){
   8005c:	defffe04 	addi	sp,sp,-8
   80060:	dfc00115 	stw	ra,4(sp)
   80064:	df000015 	stw	fp,0(sp)
   80068:	d839883a 	mov	fp,sp

	//open the Audio codec device
	audio_dev = alt_up_audio_open_dev (AUDIO_CODEC_NAME);
   8006c:	01000234 	movhi	r4,8
   80070:	21093304 	addi	r4,r4,9420
   80074:	0080d7c0 	call	80d7c <alt_up_audio_open_dev>
   80078:	d0a1a315 	stw	r2,-31092(gp)
	} else {
	//printf("Opened audio codec device \n");
	}

	// open the Audio config device
	av_config_dev = alt_up_av_config_open_dev(AUDIO_CONFIG_NAME);
   8007c:	01000234 	movhi	r4,8
   80080:	21093804 	addi	r4,r4,9440
   80084:	00815240 	call	81524 <alt_up_av_config_open_dev>
   80088:	d0a1a415 	stw	r2,-31088(gp)
	} else {
	//printf("Opened audio config device \n\r");
	}

	//Reset Audio Codec chip (WM8731) to empty Fifos + hardware init config.
	alt_up_audio_reset_audio_core(audio_dev);
   8008c:	d0a1a317 	ldw	r2,-31092(gp)
   80090:	1009883a 	mov	r4,r2
   80094:	0080f900 	call	80f90 <alt_up_audio_reset_audio_core>
	alt_up_av_config_reset(av_config_dev);
   80098:	d0a1a417 	ldw	r2,-31088(gp)
   8009c:	1009883a 	mov	r4,r2
   800a0:	00816680 	call	81668 <alt_up_av_config_reset>
	//for (i = 0; i < 100; i++) {
		//printf("i = %d\n\r", i);
	//}

	//Audio Chip ready for I2C transfer?
	av_config_dev = alt_up_av_config_open_dev(AUDIO_CONFIG_NAME);
   800a4:	01000234 	movhi	r4,8
   800a8:	21093804 	addi	r4,r4,9440
   800ac:	00815240 	call	81524 <alt_up_av_config_open_dev>
   800b0:	d0a1a415 	stw	r2,-31088(gp)
	if(alt_up_av_config_read_ready(av_config_dev)){
   800b4:	d0a1a417 	ldw	r2,-31088(gp)
   800b8:	1009883a 	mov	r4,r2
   800bc:	00817640 	call	81764 <alt_up_av_config_read_ready>
	//Enable BYPASS, should received audio now. Audio Path control Register = 0x04, Data to send = 0x0A
	//alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x0A);

	//Enabling Left Line Input
	//0db, Disable mute.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x00, 0x17);
   800c0:	d0a1a417 	ldw	r2,-31088(gp)
   800c4:	018005c4 	movi	r6,23
   800c8:	000b883a 	mov	r5,zero
   800cc:	1009883a 	mov	r4,r2
   800d0:	008179c0 	call	8179c <alt_up_av_config_write_audio_cfg_register>

	//NO right channel since my cheap audio cable has only left channel working...
	//Enabling Right Line Input
	//0db, Disable mute.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x01, 0x17);
   800d4:	d0a1a417 	ldw	r2,-31088(gp)
   800d8:	018005c4 	movi	r6,23
   800dc:	01400044 	movi	r5,1
   800e0:	1009883a 	mov	r4,r2
   800e4:	008179c0 	call	8179c <alt_up_av_config_write_audio_cfg_register>
	//alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x01, 0x80);

	//Left Headphone Out.
	//0db, with Zero Crossing Enable
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x2, 0xF9);
   800e8:	d0a1a417 	ldw	r2,-31088(gp)
   800ec:	01803e44 	movi	r6,249
   800f0:	01400084 	movi	r5,2
   800f4:	1009883a 	mov	r4,r2
   800f8:	008179c0 	call	8179c <alt_up_av_config_write_audio_cfg_register>
	//Right Headphone Out.
	//0db, with Zero Crossing Enable
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x3, 0xF9);
   800fc:	d0a1a417 	ldw	r2,-31088(gp)
   80100:	01803e44 	movi	r6,249
   80104:	014000c4 	movi	r5,3
   80108:	1009883a 	mov	r4,r2
   8010c:	008179c0 	call	8179c <alt_up_av_config_write_audio_cfg_register>

	//Analogue Audio Path Control
	//Select DAC, Disable Bypass to be output to RHPout/LHPout.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x12);
   80110:	d0a1a417 	ldw	r2,-31088(gp)
   80114:	01800484 	movi	r6,18
   80118:	01400104 	movi	r5,4
   8011c:	1009883a 	mov	r4,r2
   80120:	008179c0 	call	8179c <alt_up_av_config_write_audio_cfg_register>

	//Digital Audio Path Control
	//Disable DAC Soft Mute Control
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x5, 0x06);
   80124:	d0a1a417 	ldw	r2,-31088(gp)
   80128:	01800184 	movi	r6,6
   8012c:	01400144 	movi	r5,5
   80130:	1009883a 	mov	r4,r2
   80134:	008179c0 	call	8179c <alt_up_av_config_write_audio_cfg_register>

	//Power Down Control
	//everything ON except MICPD, OSCPD, CLKOUTPD. Not using MIC input.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x6, 0x02);
   80138:	d0a1a417 	ldw	r2,-31088(gp)
   8013c:	01800084 	movi	r6,2
   80140:	01400184 	movi	r5,6
   80144:	1009883a 	mov	r4,r2
   80148:	008179c0 	call	8179c <alt_up_av_config_write_audio_cfg_register>

	//The rest of control registers are initialized by Hardware.

	//Select DAC, Disable Bypass to be output to RHPout/LHPout.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x12);
   8014c:	d0a1a417 	ldw	r2,-31088(gp)
   80150:	01800484 	movi	r6,18
   80154:	01400104 	movi	r5,4
   80158:	1009883a 	mov	r4,r2
   8015c:	008179c0 	call	8179c <alt_up_av_config_write_audio_cfg_register>
}
   80160:	0001883a 	nop
   80164:	e037883a 	mov	sp,fp
   80168:	dfc00117 	ldw	ra,4(sp)
   8016c:	df000017 	ldw	fp,0(sp)
   80170:	dec00204 	addi	sp,sp,8
   80174:	f800283a 	ret

00080178 <audio_no_effect>:

//No effect, this simply reads value from ADC and outputs them to DAC.
// NOTE : with my cheap audio cable, only the LEFT input works.
void audio_no_effect(void){
   80178:	defffc04 	addi	sp,sp,-16
   8017c:	dfc00315 	stw	ra,12(sp)
   80180:	df000215 	stw	fp,8(sp)
   80184:	df000204 	addi	fp,sp,8
	//Select DAC, Disable Bypass to be output to RHPout/LHPout.
	//alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x12);

	//EVEN BETTER, best one.

	int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_LEFT);
   80188:	d0a1a317 	ldw	r2,-31092(gp)
   8018c:	000b883a 	mov	r5,zero
   80190:	1009883a 	mov	r4,r2
   80194:	00810240 	call	81024 <alt_up_audio_read_fifo_avail>
   80198:	e0bfff15 	stw	r2,-4(fp)
	if(fifospace>AUDIO_BUFFER_LEN){
   8019c:	e0bfff17 	ldw	r2,-4(fp)
   801a0:	10801050 	cmplti	r2,r2,65
   801a4:	10004c1e 	bne	r2,zero,802d8 <audio_no_effect+0x160>

		alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   801a8:	d0a1a317 	ldw	r2,-31092(gp)
   801ac:	01c00044 	movi	r7,1
   801b0:	01801004 	movi	r6,64
   801b4:	014003b4 	movhi	r5,14
   801b8:	29769304 	addi	r5,r5,-9652
   801bc:	1009883a 	mov	r4,r2
   801c0:	00812840 	call	81284 <alt_up_audio_read_fifo>
		alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   801c4:	d0a1a317 	ldw	r2,-31092(gp)
   801c8:	000f883a 	mov	r7,zero
   801cc:	01801004 	movi	r6,64
   801d0:	014003b4 	movhi	r5,14
   801d4:	29771304 	addi	r5,r5,-9140
   801d8:	1009883a 	mov	r4,r2
   801dc:	00812840 	call	81284 <alt_up_audio_read_fifo>

		//AROUND 32767,
		int i;
		for(i=0;i<AUDIO_BUFFER_LEN;i++){
   801e0:	e03ffe15 	stw	zero,-8(fp)
   801e4:	00002b06 	br	80294 <audio_no_effect+0x11c>
			if(l_buf[i]>40000){
   801e8:	008003b4 	movhi	r2,14
   801ec:	10b71304 	addi	r2,r2,-9140
   801f0:	e0fffe17 	ldw	r3,-8(fp)
   801f4:	18c7883a 	add	r3,r3,r3
   801f8:	18c7883a 	add	r3,r3,r3
   801fc:	10c5883a 	add	r2,r2,r3
   80200:	10800017 	ldw	r2,0(r2)
   80204:	10a71070 	cmpltui	r2,r2,40001
   80208:	1000101e 	bne	r2,zero,8024c <audio_no_effect+0xd4>
				l_buf[i] = l_buf[i] - 0x7fff;
   8020c:	008003b4 	movhi	r2,14
   80210:	10b71304 	addi	r2,r2,-9140
   80214:	e0fffe17 	ldw	r3,-8(fp)
   80218:	18c7883a 	add	r3,r3,r3
   8021c:	18c7883a 	add	r3,r3,r3
   80220:	10c5883a 	add	r2,r2,r3
   80224:	10800017 	ldw	r2,0(r2)
   80228:	11200044 	addi	r4,r2,-32767
   8022c:	008003b4 	movhi	r2,14
   80230:	10b71304 	addi	r2,r2,-9140
   80234:	e0fffe17 	ldw	r3,-8(fp)
   80238:	18c7883a 	add	r3,r3,r3
   8023c:	18c7883a 	add	r3,r3,r3
   80240:	10c5883a 	add	r2,r2,r3
   80244:	11000015 	stw	r4,0(r2)
   80248:	00000f06 	br	80288 <audio_no_effect+0x110>
			} else {
				l_buf[i] = l_buf[i] + 0x7fff;
   8024c:	008003b4 	movhi	r2,14
   80250:	10b71304 	addi	r2,r2,-9140
   80254:	e0fffe17 	ldw	r3,-8(fp)
   80258:	18c7883a 	add	r3,r3,r3
   8025c:	18c7883a 	add	r3,r3,r3
   80260:	10c5883a 	add	r2,r2,r3
   80264:	10800017 	ldw	r2,0(r2)
   80268:	111fffc4 	addi	r4,r2,32767
   8026c:	008003b4 	movhi	r2,14
   80270:	10b71304 	addi	r2,r2,-9140
   80274:	e0fffe17 	ldw	r3,-8(fp)
   80278:	18c7883a 	add	r3,r3,r3
   8027c:	18c7883a 	add	r3,r3,r3
   80280:	10c5883a 	add	r2,r2,r3
   80284:	11000015 	stw	r4,0(r2)
		alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
		alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);

		//AROUND 32767,
		int i;
		for(i=0;i<AUDIO_BUFFER_LEN;i++){
   80288:	e0bffe17 	ldw	r2,-8(fp)
   8028c:	10800044 	addi	r2,r2,1
   80290:	e0bffe15 	stw	r2,-8(fp)
   80294:	e0bffe17 	ldw	r2,-8(fp)
   80298:	10801010 	cmplti	r2,r2,64
   8029c:	103fd21e 	bne	r2,zero,801e8 <__alt_data_end+0xfff94358>
			} else {
				l_buf[i] = l_buf[i] + 0x7fff;
			}
		}

		alt_up_audio_write_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   802a0:	d0a1a317 	ldw	r2,-31092(gp)
   802a4:	01c00044 	movi	r7,1
   802a8:	01801004 	movi	r6,64
   802ac:	014003b4 	movhi	r5,14
   802b0:	29771304 	addi	r5,r5,-9140
   802b4:	1009883a 	mov	r4,r2
   802b8:	00813640 	call	81364 <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   802bc:	d0a1a317 	ldw	r2,-31092(gp)
   802c0:	000f883a 	mov	r7,zero
   802c4:	01801004 	movi	r6,64
   802c8:	014003b4 	movhi	r5,14
   802cc:	29771304 	addi	r5,r5,-9140
   802d0:	1009883a 	mov	r4,r2
   802d4:	00813640 	call	81364 <alt_up_audio_write_fifo>
	}

}
   802d8:	0001883a 	nop
   802dc:	e037883a 	mov	sp,fp
   802e0:	dfc00117 	ldw	ra,4(sp)
   802e4:	df000017 	ldw	fp,0(sp)
   802e8:	dec00204 	addi	sp,sp,8
   802ec:	f800283a 	ret

000802f0 <audio_distortion>:

void audio_distortion(void){
   802f0:	defffc04 	addi	sp,sp,-16
   802f4:	dfc00315 	stw	ra,12(sp)
   802f8:	df000215 	stw	fp,8(sp)
   802fc:	df000204 	addi	fp,sp,8

	unsigned int distortion_l_buf;
	unsigned int distortion_r_buf;

	// read audio buffer
	alt_up_audio_read_fifo (audio_dev, &(distortion_r_buf), 1, ALT_UP_AUDIO_RIGHT);
   80300:	d0a1a317 	ldw	r2,-31092(gp)
   80304:	e0ffff04 	addi	r3,fp,-4
   80308:	01c00044 	movi	r7,1
   8030c:	01800044 	movi	r6,1
   80310:	180b883a 	mov	r5,r3
   80314:	1009883a 	mov	r4,r2
   80318:	00812840 	call	81284 <alt_up_audio_read_fifo>
	alt_up_audio_read_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   8031c:	d0a1a317 	ldw	r2,-31092(gp)
   80320:	000f883a 	mov	r7,zero
   80324:	01800044 	movi	r6,1
   80328:	e17ffe04 	addi	r5,fp,-8
   8032c:	1009883a 	mov	r4,r2
   80330:	00812840 	call	81284 <alt_up_audio_read_fifo>

	if(distortion_l_buf>40000){
   80334:	e0bffe17 	ldw	r2,-8(fp)
   80338:	10a71070 	cmpltui	r2,r2,40001
   8033c:	1000041e 	bne	r2,zero,80350 <audio_distortion+0x60>
		distortion_l_buf = distortion_l_buf - 0x7fff ;
   80340:	e0bffe17 	ldw	r2,-8(fp)
   80344:	10a00044 	addi	r2,r2,-32767
   80348:	e0bffe15 	stw	r2,-8(fp)
   8034c:	00000306 	br	8035c <audio_distortion+0x6c>

			} else {
				distortion_l_buf = distortion_l_buf + 0x7fff ;
   80350:	e0bffe17 	ldw	r2,-8(fp)
   80354:	109fffc4 	addi	r2,r2,32767
   80358:	e0bffe15 	stw	r2,-8(fp)

			}

	//Write audio buffer
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_RIGHT);
   8035c:	d0a1a317 	ldw	r2,-31092(gp)
   80360:	01c00044 	movi	r7,1
   80364:	01800044 	movi	r6,1
   80368:	e17ffe04 	addi	r5,fp,-8
   8036c:	1009883a 	mov	r4,r2
   80370:	00813640 	call	81364 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   80374:	d0a1a317 	ldw	r2,-31092(gp)
   80378:	000f883a 	mov	r7,zero
   8037c:	01800044 	movi	r6,1
   80380:	e17ffe04 	addi	r5,fp,-8
   80384:	1009883a 	mov	r4,r2
   80388:	00813640 	call	81364 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_RIGHT);
   8038c:	d0a1a317 	ldw	r2,-31092(gp)
   80390:	01c00044 	movi	r7,1
   80394:	01800044 	movi	r6,1
   80398:	e17ffe04 	addi	r5,fp,-8
   8039c:	1009883a 	mov	r4,r2
   803a0:	00813640 	call	81364 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   803a4:	d0a1a317 	ldw	r2,-31092(gp)
   803a8:	000f883a 	mov	r7,zero
   803ac:	01800044 	movi	r6,1
   803b0:	e17ffe04 	addi	r5,fp,-8
   803b4:	1009883a 	mov	r4,r2
   803b8:	00813640 	call	81364 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_RIGHT);
   803bc:	d0a1a317 	ldw	r2,-31092(gp)
   803c0:	01c00044 	movi	r7,1
   803c4:	01800044 	movi	r6,1
   803c8:	e17ffe04 	addi	r5,fp,-8
   803cc:	1009883a 	mov	r4,r2
   803d0:	00813640 	call	81364 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   803d4:	d0a1a317 	ldw	r2,-31092(gp)
   803d8:	000f883a 	mov	r7,zero
   803dc:	01800044 	movi	r6,1
   803e0:	e17ffe04 	addi	r5,fp,-8
   803e4:	1009883a 	mov	r4,r2
   803e8:	00813640 	call	81364 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_RIGHT);
   803ec:	d0a1a317 	ldw	r2,-31092(gp)
   803f0:	01c00044 	movi	r7,1
   803f4:	01800044 	movi	r6,1
   803f8:	e17ffe04 	addi	r5,fp,-8
   803fc:	1009883a 	mov	r4,r2
   80400:	00813640 	call	81364 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   80404:	d0a1a317 	ldw	r2,-31092(gp)
   80408:	000f883a 	mov	r7,zero
   8040c:	01800044 	movi	r6,1
   80410:	e17ffe04 	addi	r5,fp,-8
   80414:	1009883a 	mov	r4,r2
   80418:	00813640 	call	81364 <alt_up_audio_write_fifo>
}
   8041c:	0001883a 	nop
   80420:	e037883a 	mov	sp,fp
   80424:	dfc00117 	ldw	ra,4(sp)
   80428:	df000017 	ldw	fp,0(sp)
   8042c:	dec00204 	addi	sp,sp,8
   80430:	f800283a 	ret

00080434 <audio_delay>:

void audio_delay(void){
   80434:	defffc04 	addi	sp,sp,-16
   80438:	dfc00315 	stw	ra,12(sp)
   8043c:	df000215 	stw	fp,8(sp)
   80440:	df000204 	addi	fp,sp,8

	//Active bypass + dac in audio path
	//alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x1A);

	//Acquiring/Writing to Audio Chip
	int input_fifo = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_LEFT);
   80444:	d0a1a317 	ldw	r2,-31092(gp)
   80448:	000b883a 	mov	r5,zero
   8044c:	1009883a 	mov	r4,r2
   80450:	00810240 	call	81024 <alt_up_audio_read_fifo_avail>
   80454:	e0bfff15 	stw	r2,-4(fp)
	//For synchronizing writing/reading from audio chip.
	if(input_fifo>AUDIO_BUFFER_LEN){
   80458:	e0bfff17 	ldw	r2,-4(fp)
   8045c:	10801050 	cmplti	r2,r2,65
   80460:	10007a1e 	bne	r2,zero,8064c <audio_delay+0x218>

		//Circular buffer of 16000
		//storing index
			storing_audio_index = storing_audio_index % (DELAY_AUDIO_BUFFER_LEN);
   80464:	d0a19f17 	ldw	r2,-31108(gp)
   80468:	01400074 	movhi	r5,1
   8046c:	295a5504 	addi	r5,r5,26964
   80470:	1009883a 	mov	r4,r2
   80474:	0080b280 	call	80b28 <__umodsi3>
   80478:	d0a19f15 	stw	r2,-31108(gp)
		//reading index
		reading_audio_index = reading_audio_index % (DELAY_AUDIO_BUFFER_LEN-64);//SOLVE THE TOCTOC
   8047c:	d0a00017 	ldw	r2,-32768(gp)
   80480:	01400074 	movhi	r5,1
   80484:	295a4504 	addi	r5,r5,26900
   80488:	1009883a 	mov	r4,r2
   8048c:	0080b280 	call	80b28 <__umodsi3>
   80490:	d0a00015 	stw	r2,-32768(gp)

		//storing_audio_index = storing_audio_index % (DELAY_AUDIO_BUFFER_LEN);
		//reading_audio_index = reading_audio_index % (DELAY_AUDIO_BUFFER_LEN);//SOLVE THE TOCTOC

		//Reading input fifo.
		alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   80494:	d0a1a317 	ldw	r2,-31092(gp)
   80498:	01c00044 	movi	r7,1
   8049c:	01801004 	movi	r6,64
   804a0:	014003b4 	movhi	r5,14
   804a4:	29769304 	addi	r5,r5,-9652
   804a8:	1009883a 	mov	r4,r2
   804ac:	00812840 	call	81284 <alt_up_audio_read_fifo>
		alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   804b0:	d0a1a317 	ldw	r2,-31092(gp)
   804b4:	000f883a 	mov	r7,zero
   804b8:	01801004 	movi	r6,64
   804bc:	014003b4 	movhi	r5,14
   804c0:	29771304 	addi	r5,r5,-9140
   804c4:	1009883a 	mov	r4,r2
   804c8:	00812840 	call	81284 <alt_up_audio_read_fifo>
		//printf("words_read = %d\n\r",words_read);

		//for 100 samples.
		int i;
		for(i=0;i<AUDIO_BUFFER_LEN;i++){
   804cc:	e03ffe15 	stw	zero,-8(fp)
   804d0:	00004d06 	br	80608 <audio_delay+0x1d4>

			//ADJUSTING TO AROUND 32767,
			if(l_buf[i]>40000){
   804d4:	008003b4 	movhi	r2,14
   804d8:	10b71304 	addi	r2,r2,-9140
   804dc:	e0fffe17 	ldw	r3,-8(fp)
   804e0:	18c7883a 	add	r3,r3,r3
   804e4:	18c7883a 	add	r3,r3,r3
   804e8:	10c5883a 	add	r2,r2,r3
   804ec:	10800017 	ldw	r2,0(r2)
   804f0:	10a71070 	cmpltui	r2,r2,40001
   804f4:	1000101e 	bne	r2,zero,80538 <audio_delay+0x104>
				l_buf[i] = l_buf[i] - 0x7fff;
   804f8:	008003b4 	movhi	r2,14
   804fc:	10b71304 	addi	r2,r2,-9140
   80500:	e0fffe17 	ldw	r3,-8(fp)
   80504:	18c7883a 	add	r3,r3,r3
   80508:	18c7883a 	add	r3,r3,r3
   8050c:	10c5883a 	add	r2,r2,r3
   80510:	10800017 	ldw	r2,0(r2)
   80514:	11200044 	addi	r4,r2,-32767
   80518:	008003b4 	movhi	r2,14
   8051c:	10b71304 	addi	r2,r2,-9140
   80520:	e0fffe17 	ldw	r3,-8(fp)
   80524:	18c7883a 	add	r3,r3,r3
   80528:	18c7883a 	add	r3,r3,r3
   8052c:	10c5883a 	add	r2,r2,r3
   80530:	11000015 	stw	r4,0(r2)
   80534:	00000f06 	br	80574 <audio_delay+0x140>
			} else {
				l_buf[i] = l_buf[i] + 0x7fff;
   80538:	008003b4 	movhi	r2,14
   8053c:	10b71304 	addi	r2,r2,-9140
   80540:	e0fffe17 	ldw	r3,-8(fp)
   80544:	18c7883a 	add	r3,r3,r3
   80548:	18c7883a 	add	r3,r3,r3
   8054c:	10c5883a 	add	r2,r2,r3
   80550:	10800017 	ldw	r2,0(r2)
   80554:	111fffc4 	addi	r4,r2,32767
   80558:	008003b4 	movhi	r2,14
   8055c:	10b71304 	addi	r2,r2,-9140
   80560:	e0fffe17 	ldw	r3,-8(fp)
   80564:	18c7883a 	add	r3,r3,r3
   80568:	18c7883a 	add	r3,r3,r3
   8056c:	10c5883a 	add	r2,r2,r3
   80570:	11000015 	stw	r4,0(r2)
			}

			//storing in delay_buffer
			delay_audio_buffer[storing_audio_index] = l_buf[i];
   80574:	d0e19f17 	ldw	r3,-31108(gp)
   80578:	008003b4 	movhi	r2,14
   8057c:	10b71304 	addi	r2,r2,-9140
   80580:	e13ffe17 	ldw	r4,-8(fp)
   80584:	2109883a 	add	r4,r4,r4
   80588:	2109883a 	add	r4,r4,r4
   8058c:	1105883a 	add	r2,r2,r4
   80590:	11000017 	ldw	r4,0(r2)
   80594:	00800234 	movhi	r2,8
   80598:	108c7f04 	addi	r2,r2,12796
   8059c:	18c7883a 	add	r3,r3,r3
   805a0:	18c7883a 	add	r3,r3,r3
   805a4:	10c5883a 	add	r2,r2,r3
   805a8:	11000015 	stw	r4,0(r2)
			//retrieving from buffer
			outgoing_buffer[i] = delay_audio_buffer[reading_audio_index];
   805ac:	d0e00017 	ldw	r3,-32768(gp)
   805b0:	00800234 	movhi	r2,8
   805b4:	108c7f04 	addi	r2,r2,12796
   805b8:	18c7883a 	add	r3,r3,r3
   805bc:	18c7883a 	add	r3,r3,r3
   805c0:	10c5883a 	add	r2,r2,r3
   805c4:	11000017 	ldw	r4,0(r2)
   805c8:	008003b4 	movhi	r2,14
   805cc:	10b6d304 	addi	r2,r2,-9396
   805d0:	e0fffe17 	ldw	r3,-8(fp)
   805d4:	18c7883a 	add	r3,r3,r3
   805d8:	18c7883a 	add	r3,r3,r3
   805dc:	10c5883a 	add	r2,r2,r3
   805e0:	11000015 	stw	r4,0(r2)

			//Reading index is always 1 sample ahead of storing index.
			storing_audio_index = storing_audio_index + 1;
   805e4:	d0a19f17 	ldw	r2,-31108(gp)
   805e8:	10800044 	addi	r2,r2,1
   805ec:	d0a19f15 	stw	r2,-31108(gp)
			reading_audio_index = reading_audio_index + 1;
   805f0:	d0a00017 	ldw	r2,-32768(gp)
   805f4:	10800044 	addi	r2,r2,1
   805f8:	d0a00015 	stw	r2,-32768(gp)
		alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
		//printf("words_read = %d\n\r",words_read);

		//for 100 samples.
		int i;
		for(i=0;i<AUDIO_BUFFER_LEN;i++){
   805fc:	e0bffe17 	ldw	r2,-8(fp)
   80600:	10800044 	addi	r2,r2,1
   80604:	e0bffe15 	stw	r2,-8(fp)
   80608:	e0bffe17 	ldw	r2,-8(fp)
   8060c:	10801010 	cmplti	r2,r2,64
   80610:	103fb01e 	bne	r2,zero,804d4 <__alt_data_end+0xfff94644>
			storing_audio_index = storing_audio_index + 1;
			reading_audio_index = reading_audio_index + 1;

		}
		//writing to output fifo
		alt_up_audio_write_fifo (audio_dev, outgoing_buffer, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   80614:	d0a1a317 	ldw	r2,-31092(gp)
   80618:	01c00044 	movi	r7,1
   8061c:	01801004 	movi	r6,64
   80620:	014003b4 	movhi	r5,14
   80624:	2976d304 	addi	r5,r5,-9396
   80628:	1009883a 	mov	r4,r2
   8062c:	00813640 	call	81364 <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo (audio_dev, outgoing_buffer, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   80630:	d0a1a317 	ldw	r2,-31092(gp)
   80634:	000f883a 	mov	r7,zero
   80638:	01801004 	movi	r6,64
   8063c:	014003b4 	movhi	r5,14
   80640:	2976d304 	addi	r5,r5,-9396
   80644:	1009883a 	mov	r4,r2
   80648:	00813640 	call	81364 <alt_up_audio_write_fifo>
	}

}
   8064c:	0001883a 	nop
   80650:	e037883a 	mov	sp,fp
   80654:	dfc00117 	ldw	ra,4(sp)
   80658:	df000017 	ldw	fp,0(sp)
   8065c:	dec00204 	addi	sp,sp,8
   80660:	f800283a 	ret

00080664 <audio_octave>:

void audio_octave(void){
   80664:	defff904 	addi	sp,sp,-28
   80668:	dfc00615 	stw	ra,24(sp)
   8066c:	df000515 	stw	fp,20(sp)
   80670:	df000504 	addi	fp,sp,20
	//Not required.
	//Active bypass + dac in audio path
	//alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x1A);

	//Dual buffer scheme use.
	int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_LEFT);
   80674:	d0a1a317 	ldw	r2,-31092(gp)
   80678:	000b883a 	mov	r5,zero
   8067c:	1009883a 	mov	r4,r2
   80680:	00810240 	call	81024 <alt_up_audio_read_fifo_avail>
   80684:	e0bffc15 	stw	r2,-16(fp)
		if(fifospace>AUDIO_BUFFER_LEN){
   80688:	e0bffc17 	ldw	r2,-16(fp)
   8068c:	10801050 	cmplti	r2,r2,65
   80690:	1000971e 	bne	r2,zero,808f0 <audio_octave+0x28c>

			//2 circular buffer phased shift by 180degrees.
			octave_storing_index = octave_storing_index %  OCTAVE_AUDIO_BUFFER_LEN;
   80694:	d0a1a117 	ldw	r2,-31100(gp)
   80698:	10800fcc 	andi	r2,r2,63
   8069c:	d0a1a115 	stw	r2,-31100(gp)
			octave_reading_index1 = octave_reading_index1 %  OCTAVE_AUDIO_BUFFER_LEN;
   806a0:	d0a1a017 	ldw	r2,-31104(gp)
   806a4:	10800fcc 	andi	r2,r2,63
   806a8:	d0a1a015 	stw	r2,-31104(gp)
			octave_reading_index2 = octave_reading_index2 %  OCTAVE_AUDIO_BUFFER_LEN;
   806ac:	d0a00117 	ldw	r2,-32764(gp)
   806b0:	10800fcc 	andi	r2,r2,63
   806b4:	d0a00115 	stw	r2,-32764(gp)

			alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   806b8:	d0a1a317 	ldw	r2,-31092(gp)
   806bc:	01c00044 	movi	r7,1
   806c0:	01801004 	movi	r6,64
   806c4:	014003b4 	movhi	r5,14
   806c8:	29769304 	addi	r5,r5,-9652
   806cc:	1009883a 	mov	r4,r2
   806d0:	00812840 	call	81284 <alt_up_audio_read_fifo>
			alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   806d4:	d0a1a317 	ldw	r2,-31092(gp)
   806d8:	000f883a 	mov	r7,zero
   806dc:	01801004 	movi	r6,64
   806e0:	014003b4 	movhi	r5,14
   806e4:	29771304 	addi	r5,r5,-9140
   806e8:	1009883a 	mov	r4,r2
   806ec:	00812840 	call	81284 <alt_up_audio_read_fifo>


			int i;
			for(i=0;i<AUDIO_BUFFER_LEN;i++){
   806f0:	e03ffb15 	stw	zero,-20(fp)
   806f4:	00006d06 	br	808ac <audio_octave+0x248>
				//AROUND 32767
				if(l_buf[i]>40000){
   806f8:	008003b4 	movhi	r2,14
   806fc:	10b71304 	addi	r2,r2,-9140
   80700:	e0fffb17 	ldw	r3,-20(fp)
   80704:	18c7883a 	add	r3,r3,r3
   80708:	18c7883a 	add	r3,r3,r3
   8070c:	10c5883a 	add	r2,r2,r3
   80710:	10800017 	ldw	r2,0(r2)
   80714:	10a71070 	cmpltui	r2,r2,40001
   80718:	1000101e 	bne	r2,zero,8075c <audio_octave+0xf8>
					l_buf[i] = l_buf[i] - 0x7fff;
   8071c:	008003b4 	movhi	r2,14
   80720:	10b71304 	addi	r2,r2,-9140
   80724:	e0fffb17 	ldw	r3,-20(fp)
   80728:	18c7883a 	add	r3,r3,r3
   8072c:	18c7883a 	add	r3,r3,r3
   80730:	10c5883a 	add	r2,r2,r3
   80734:	10800017 	ldw	r2,0(r2)
   80738:	11200044 	addi	r4,r2,-32767
   8073c:	008003b4 	movhi	r2,14
   80740:	10b71304 	addi	r2,r2,-9140
   80744:	e0fffb17 	ldw	r3,-20(fp)
   80748:	18c7883a 	add	r3,r3,r3
   8074c:	18c7883a 	add	r3,r3,r3
   80750:	10c5883a 	add	r2,r2,r3
   80754:	11000015 	stw	r4,0(r2)
   80758:	00000f06 	br	80798 <audio_octave+0x134>
				} else {
					l_buf[i] = l_buf[i] + 0x7fff;
   8075c:	008003b4 	movhi	r2,14
   80760:	10b71304 	addi	r2,r2,-9140
   80764:	e0fffb17 	ldw	r3,-20(fp)
   80768:	18c7883a 	add	r3,r3,r3
   8076c:	18c7883a 	add	r3,r3,r3
   80770:	10c5883a 	add	r2,r2,r3
   80774:	10800017 	ldw	r2,0(r2)
   80778:	111fffc4 	addi	r4,r2,32767
   8077c:	008003b4 	movhi	r2,14
   80780:	10b71304 	addi	r2,r2,-9140
   80784:	e0fffb17 	ldw	r3,-20(fp)
   80788:	18c7883a 	add	r3,r3,r3
   8078c:	18c7883a 	add	r3,r3,r3
   80790:	10c5883a 	add	r2,r2,r3
   80794:	11000015 	stw	r4,0(r2)
				}

				//storing in octave_buffer1
				octave_buffer1[octave_storing_index] = l_buf[i];
   80798:	d0e1a117 	ldw	r3,-31100(gp)
   8079c:	008003b4 	movhi	r2,14
   807a0:	10b71304 	addi	r2,r2,-9140
   807a4:	e13ffb17 	ldw	r4,-20(fp)
   807a8:	2109883a 	add	r4,r4,r4
   807ac:	2109883a 	add	r4,r4,r4
   807b0:	1105883a 	add	r2,r2,r4
   807b4:	11000017 	ldw	r4,0(r2)
   807b8:	008003b4 	movhi	r2,14
   807bc:	10b5d304 	addi	r2,r2,-10420
   807c0:	18c7883a 	add	r3,r3,r3
   807c4:	18c7883a 	add	r3,r3,r3
   807c8:	10c5883a 	add	r2,r2,r3
   807cc:	11000015 	stw	r4,0(r2)
				//storing in octave_buffer2
				octave_buffer2[octave_storing_index] = l_buf[i];
   807d0:	d0e1a117 	ldw	r3,-31100(gp)
   807d4:	008003b4 	movhi	r2,14
   807d8:	10b71304 	addi	r2,r2,-9140
   807dc:	e13ffb17 	ldw	r4,-20(fp)
   807e0:	2109883a 	add	r4,r4,r4
   807e4:	2109883a 	add	r4,r4,r4
   807e8:	1105883a 	add	r2,r2,r4
   807ec:	11000017 	ldw	r4,0(r2)
   807f0:	008003b4 	movhi	r2,14
   807f4:	10b61304 	addi	r2,r2,-10164
   807f8:	18c7883a 	add	r3,r3,r3
   807fc:	18c7883a 	add	r3,r3,r3
   80800:	10c5883a 	add	r2,r2,r3
   80804:	11000015 	stw	r4,0(r2)
				//reading from octave_buffer1 into a temp1 value. Will be further averaged.
				unsigned int temp1,temp2;
				temp1 = octave_buffer1[octave_reading_index1];
   80808:	d0e1a017 	ldw	r3,-31104(gp)
   8080c:	008003b4 	movhi	r2,14
   80810:	10b5d304 	addi	r2,r2,-10420
   80814:	18c7883a 	add	r3,r3,r3
   80818:	18c7883a 	add	r3,r3,r3
   8081c:	10c5883a 	add	r2,r2,r3
   80820:	10800017 	ldw	r2,0(r2)
   80824:	e0bffd15 	stw	r2,-12(fp)
				temp2 = octave_buffer2[octave_reading_index2];
   80828:	d0e00117 	ldw	r3,-32764(gp)
   8082c:	008003b4 	movhi	r2,14
   80830:	10b61304 	addi	r2,r2,-10164
   80834:	18c7883a 	add	r3,r3,r3
   80838:	18c7883a 	add	r3,r3,r3
   8083c:	10c5883a 	add	r2,r2,r3
   80840:	10800017 	ldw	r2,0(r2)
   80844:	e0bffe15 	stw	r2,-8(fp)
				//Average is taken
				unsigned int average;
				average = (temp1+temp2)/2;
   80848:	e0fffd17 	ldw	r3,-12(fp)
   8084c:	e0bffe17 	ldw	r2,-8(fp)
   80850:	1885883a 	add	r2,r3,r2
   80854:	1004d07a 	srli	r2,r2,1
   80858:	e0bfff15 	stw	r2,-4(fp)
				//Average is put into octave_outputbuffer
				octave_outputbuffer[i] =  average;
   8085c:	008003b4 	movhi	r2,14
   80860:	10b65304 	addi	r2,r2,-9908
   80864:	e0fffb17 	ldw	r3,-20(fp)
   80868:	18c7883a 	add	r3,r3,r3
   8086c:	18c7883a 	add	r3,r3,r3
   80870:	10c5883a 	add	r2,r2,r3
   80874:	e0ffff17 	ldw	r3,-4(fp)
   80878:	10c00015 	stw	r3,0(r2)
				//printf("average is %d\n\r", average);

				//Best fit.
				octave_reading_index1 = octave_reading_index1 + 1;
   8087c:	d0a1a017 	ldw	r2,-31104(gp)
   80880:	10800044 	addi	r2,r2,1
   80884:	d0a1a015 	stw	r2,-31104(gp)
				octave_reading_index2 = octave_reading_index2 + 1;
   80888:	d0a00117 	ldw	r2,-32764(gp)
   8088c:	10800044 	addi	r2,r2,1
   80890:	d0a00115 	stw	r2,-32764(gp)
				octave_storing_index = octave_storing_index + 1;
   80894:	d0a1a117 	ldw	r2,-31100(gp)
   80898:	10800044 	addi	r2,r2,1
   8089c:	d0a1a115 	stw	r2,-31100(gp)
			alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);


			int i;
			for(i=0;i<AUDIO_BUFFER_LEN;i++){
   808a0:	e0bffb17 	ldw	r2,-20(fp)
   808a4:	10800044 	addi	r2,r2,1
   808a8:	e0bffb15 	stw	r2,-20(fp)
   808ac:	e0bffb17 	ldw	r2,-20(fp)
   808b0:	10801010 	cmplti	r2,r2,64
   808b4:	103f901e 	bne	r2,zero,806f8 <__alt_data_end+0xfff94868>
				octave_reading_index2 = octave_reading_index2 + 1;
				octave_storing_index = octave_storing_index + 1;

			}
			//writing to output fifo
			alt_up_audio_write_fifo (audio_dev, octave_outputbuffer, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   808b8:	d0a1a317 	ldw	r2,-31092(gp)
   808bc:	01c00044 	movi	r7,1
   808c0:	01801004 	movi	r6,64
   808c4:	014003b4 	movhi	r5,14
   808c8:	29765304 	addi	r5,r5,-9908
   808cc:	1009883a 	mov	r4,r2
   808d0:	00813640 	call	81364 <alt_up_audio_write_fifo>
			alt_up_audio_write_fifo (audio_dev, octave_outputbuffer, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   808d4:	d0a1a317 	ldw	r2,-31092(gp)
   808d8:	000f883a 	mov	r7,zero
   808dc:	01801004 	movi	r6,64
   808e0:	014003b4 	movhi	r5,14
   808e4:	29765304 	addi	r5,r5,-9908
   808e8:	1009883a 	mov	r4,r2
   808ec:	00813640 	call	81364 <alt_up_audio_write_fifo>
		}

}
   808f0:	0001883a 	nop
   808f4:	e037883a 	mov	sp,fp
   808f8:	dfc00117 	ldw	ra,4(sp)
   808fc:	df000017 	ldw	fp,0(sp)
   80900:	dec00204 	addi	sp,sp,8
   80904:	f800283a 	ret

00080908 <main>:
int state = 0;
//State selection
void state_select(void);

int main(void)
{
   80908:	defffe04 	addi	sp,sp,-8
   8090c:	dfc00115 	stw	ra,4(sp)
   80910:	df000015 	stw	fp,0(sp)
   80914:	d839883a 	mov	fp,sp
	//FALLING Edge selected in Qsys.
	//clear_all_edge_capture;

	//Configure audio chip. By default, Line IN is connected to Line OUT by the BYPASS scheme.
	audio_init();
   80918:	008005c0 	call	8005c <audio_init>
//		case 1 :
//			audio_distortion();
//			break;
//
//		case 2 :
			audio_delay();
   8091c:	00804340 	call	80434 <audio_delay>
//		case 3 :
//			audio_octave();
//			break;

		//}
	}
   80920:	003ffe06 	br	8091c <__alt_data_end+0xfff94a8c>

00080924 <state_select>:
	return 0;
}

void state_select(void){
   80924:	deffff04 	addi	sp,sp,-4
   80928:	df000015 	stw	fp,0(sp)
   8092c:	d839883a 	mov	fp,sp
	if(edge_capture & key0_pressed){
   80930:	00800434 	movhi	r2,16
   80934:	10840b04 	addi	r2,r2,4140
   80938:	10800037 	ldwio	r2,0(r2)
   8093c:	1080004c 	andi	r2,r2,1
   80940:	10000226 	beq	r2,zero,8094c <state_select+0x28>
		state = 0;
   80944:	d021a215 	stw	zero,-31096(gp)
   80948:	00001706 	br	809a8 <state_select+0x84>
		//clear_key0;
	} else if(edge_capture & key1_pressed){
   8094c:	00800434 	movhi	r2,16
   80950:	10840b04 	addi	r2,r2,4140
   80954:	10800037 	ldwio	r2,0(r2)
   80958:	1080008c 	andi	r2,r2,2
   8095c:	10000326 	beq	r2,zero,8096c <state_select+0x48>
		state = 1;
   80960:	00800044 	movi	r2,1
   80964:	d0a1a215 	stw	r2,-31096(gp)
   80968:	00000f06 	br	809a8 <state_select+0x84>
		//clear_key1;
	} else if(edge_capture & key2_pressed){
   8096c:	00800434 	movhi	r2,16
   80970:	10840b04 	addi	r2,r2,4140
   80974:	10800037 	ldwio	r2,0(r2)
   80978:	1080010c 	andi	r2,r2,4
   8097c:	10000326 	beq	r2,zero,8098c <state_select+0x68>
		state = 2;
   80980:	00800084 	movi	r2,2
   80984:	d0a1a215 	stw	r2,-31096(gp)
   80988:	00000706 	br	809a8 <state_select+0x84>
		//clear_key2;
	} else if(edge_capture & key3_pressed){
   8098c:	00800434 	movhi	r2,16
   80990:	10840b04 	addi	r2,r2,4140
   80994:	10800037 	ldwio	r2,0(r2)
   80998:	1080020c 	andi	r2,r2,8
   8099c:	10000226 	beq	r2,zero,809a8 <state_select+0x84>
		state = 3;
   809a0:	008000c4 	movi	r2,3
   809a4:	d0a1a215 	stw	r2,-31096(gp)
		//clear_key3;
	}

	clear_all_edge_capture;
   809a8:	00c003c4 	movi	r3,15
   809ac:	00800434 	movhi	r2,16
   809b0:	10840b04 	addi	r2,r2,4140
   809b4:	10c00035 	stwio	r3,0(r2)
}
   809b8:	0001883a 	nop
   809bc:	e037883a 	mov	sp,fp
   809c0:	df000017 	ldw	fp,0(sp)
   809c4:	dec00104 	addi	sp,sp,4
   809c8:	f800283a 	ret

000809cc <__divsi3>:
   809cc:	20001b16 	blt	r4,zero,80a3c <__divsi3+0x70>
   809d0:	000f883a 	mov	r7,zero
   809d4:	28001616 	blt	r5,zero,80a30 <__divsi3+0x64>
   809d8:	200d883a 	mov	r6,r4
   809dc:	29001a2e 	bgeu	r5,r4,80a48 <__divsi3+0x7c>
   809e0:	00800804 	movi	r2,32
   809e4:	00c00044 	movi	r3,1
   809e8:	00000106 	br	809f0 <__divsi3+0x24>
   809ec:	10000d26 	beq	r2,zero,80a24 <__divsi3+0x58>
   809f0:	294b883a 	add	r5,r5,r5
   809f4:	10bfffc4 	addi	r2,r2,-1
   809f8:	18c7883a 	add	r3,r3,r3
   809fc:	293ffb36 	bltu	r5,r4,809ec <__alt_data_end+0xfff94b5c>
   80a00:	0005883a 	mov	r2,zero
   80a04:	18000726 	beq	r3,zero,80a24 <__divsi3+0x58>
   80a08:	0005883a 	mov	r2,zero
   80a0c:	31400236 	bltu	r6,r5,80a18 <__divsi3+0x4c>
   80a10:	314dc83a 	sub	r6,r6,r5
   80a14:	10c4b03a 	or	r2,r2,r3
   80a18:	1806d07a 	srli	r3,r3,1
   80a1c:	280ad07a 	srli	r5,r5,1
   80a20:	183ffa1e 	bne	r3,zero,80a0c <__alt_data_end+0xfff94b7c>
   80a24:	38000126 	beq	r7,zero,80a2c <__divsi3+0x60>
   80a28:	0085c83a 	sub	r2,zero,r2
   80a2c:	f800283a 	ret
   80a30:	014bc83a 	sub	r5,zero,r5
   80a34:	39c0005c 	xori	r7,r7,1
   80a38:	003fe706 	br	809d8 <__alt_data_end+0xfff94b48>
   80a3c:	0109c83a 	sub	r4,zero,r4
   80a40:	01c00044 	movi	r7,1
   80a44:	003fe306 	br	809d4 <__alt_data_end+0xfff94b44>
   80a48:	00c00044 	movi	r3,1
   80a4c:	003fee06 	br	80a08 <__alt_data_end+0xfff94b78>

00080a50 <__modsi3>:
   80a50:	20001716 	blt	r4,zero,80ab0 <__modsi3+0x60>
   80a54:	000f883a 	mov	r7,zero
   80a58:	2005883a 	mov	r2,r4
   80a5c:	28001216 	blt	r5,zero,80aa8 <__modsi3+0x58>
   80a60:	2900162e 	bgeu	r5,r4,80abc <__modsi3+0x6c>
   80a64:	01800804 	movi	r6,32
   80a68:	00c00044 	movi	r3,1
   80a6c:	00000106 	br	80a74 <__modsi3+0x24>
   80a70:	30000a26 	beq	r6,zero,80a9c <__modsi3+0x4c>
   80a74:	294b883a 	add	r5,r5,r5
   80a78:	31bfffc4 	addi	r6,r6,-1
   80a7c:	18c7883a 	add	r3,r3,r3
   80a80:	293ffb36 	bltu	r5,r4,80a70 <__alt_data_end+0xfff94be0>
   80a84:	18000526 	beq	r3,zero,80a9c <__modsi3+0x4c>
   80a88:	1806d07a 	srli	r3,r3,1
   80a8c:	11400136 	bltu	r2,r5,80a94 <__modsi3+0x44>
   80a90:	1145c83a 	sub	r2,r2,r5
   80a94:	280ad07a 	srli	r5,r5,1
   80a98:	183ffb1e 	bne	r3,zero,80a88 <__alt_data_end+0xfff94bf8>
   80a9c:	38000126 	beq	r7,zero,80aa4 <__modsi3+0x54>
   80aa0:	0085c83a 	sub	r2,zero,r2
   80aa4:	f800283a 	ret
   80aa8:	014bc83a 	sub	r5,zero,r5
   80aac:	003fec06 	br	80a60 <__alt_data_end+0xfff94bd0>
   80ab0:	0109c83a 	sub	r4,zero,r4
   80ab4:	01c00044 	movi	r7,1
   80ab8:	003fe706 	br	80a58 <__alt_data_end+0xfff94bc8>
   80abc:	00c00044 	movi	r3,1
   80ac0:	003ff106 	br	80a88 <__alt_data_end+0xfff94bf8>

00080ac4 <__udivsi3>:
   80ac4:	200d883a 	mov	r6,r4
   80ac8:	2900152e 	bgeu	r5,r4,80b20 <__udivsi3+0x5c>
   80acc:	28001416 	blt	r5,zero,80b20 <__udivsi3+0x5c>
   80ad0:	00800804 	movi	r2,32
   80ad4:	00c00044 	movi	r3,1
   80ad8:	00000206 	br	80ae4 <__udivsi3+0x20>
   80adc:	10000e26 	beq	r2,zero,80b18 <__udivsi3+0x54>
   80ae0:	28000516 	blt	r5,zero,80af8 <__udivsi3+0x34>
   80ae4:	294b883a 	add	r5,r5,r5
   80ae8:	10bfffc4 	addi	r2,r2,-1
   80aec:	18c7883a 	add	r3,r3,r3
   80af0:	293ffa36 	bltu	r5,r4,80adc <__alt_data_end+0xfff94c4c>
   80af4:	18000826 	beq	r3,zero,80b18 <__udivsi3+0x54>
   80af8:	0005883a 	mov	r2,zero
   80afc:	31400236 	bltu	r6,r5,80b08 <__udivsi3+0x44>
   80b00:	314dc83a 	sub	r6,r6,r5
   80b04:	10c4b03a 	or	r2,r2,r3
   80b08:	1806d07a 	srli	r3,r3,1
   80b0c:	280ad07a 	srli	r5,r5,1
   80b10:	183ffa1e 	bne	r3,zero,80afc <__alt_data_end+0xfff94c6c>
   80b14:	f800283a 	ret
   80b18:	0005883a 	mov	r2,zero
   80b1c:	f800283a 	ret
   80b20:	00c00044 	movi	r3,1
   80b24:	003ff406 	br	80af8 <__alt_data_end+0xfff94c68>

00080b28 <__umodsi3>:
   80b28:	2005883a 	mov	r2,r4
   80b2c:	2900122e 	bgeu	r5,r4,80b78 <__umodsi3+0x50>
   80b30:	28001116 	blt	r5,zero,80b78 <__umodsi3+0x50>
   80b34:	01800804 	movi	r6,32
   80b38:	00c00044 	movi	r3,1
   80b3c:	00000206 	br	80b48 <__umodsi3+0x20>
   80b40:	30000c26 	beq	r6,zero,80b74 <__umodsi3+0x4c>
   80b44:	28000516 	blt	r5,zero,80b5c <__umodsi3+0x34>
   80b48:	294b883a 	add	r5,r5,r5
   80b4c:	31bfffc4 	addi	r6,r6,-1
   80b50:	18c7883a 	add	r3,r3,r3
   80b54:	293ffa36 	bltu	r5,r4,80b40 <__alt_data_end+0xfff94cb0>
   80b58:	18000626 	beq	r3,zero,80b74 <__umodsi3+0x4c>
   80b5c:	1806d07a 	srli	r3,r3,1
   80b60:	11400136 	bltu	r2,r5,80b68 <__umodsi3+0x40>
   80b64:	1145c83a 	sub	r2,r2,r5
   80b68:	280ad07a 	srli	r5,r5,1
   80b6c:	183ffb1e 	bne	r3,zero,80b5c <__alt_data_end+0xfff94ccc>
   80b70:	f800283a 	ret
   80b74:	f800283a 	ret
   80b78:	00c00044 	movi	r3,1
   80b7c:	003ff706 	br	80b5c <__alt_data_end+0xfff94ccc>

00080b80 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   80b80:	defffc04 	addi	sp,sp,-16
   80b84:	df000315 	stw	fp,12(sp)
   80b88:	df000304 	addi	fp,sp,12
   80b8c:	e13ffd15 	stw	r4,-12(fp)
   80b90:	e17ffe15 	stw	r5,-8(fp)
   80b94:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   80b98:	e0fffe17 	ldw	r3,-8(fp)
   80b9c:	e0bffd17 	ldw	r2,-12(fp)
   80ba0:	18800c26 	beq	r3,r2,80bd4 <alt_load_section+0x54>
  {
    while( to != end )
   80ba4:	00000806 	br	80bc8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   80ba8:	e0bffe17 	ldw	r2,-8(fp)
   80bac:	10c00104 	addi	r3,r2,4
   80bb0:	e0fffe15 	stw	r3,-8(fp)
   80bb4:	e0fffd17 	ldw	r3,-12(fp)
   80bb8:	19000104 	addi	r4,r3,4
   80bbc:	e13ffd15 	stw	r4,-12(fp)
   80bc0:	18c00017 	ldw	r3,0(r3)
   80bc4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80bc8:	e0fffe17 	ldw	r3,-8(fp)
   80bcc:	e0bfff17 	ldw	r2,-4(fp)
   80bd0:	18bff51e 	bne	r3,r2,80ba8 <__alt_data_end+0xfff94d18>
    {
      *to++ = *from++;
    }
  }
}
   80bd4:	0001883a 	nop
   80bd8:	e037883a 	mov	sp,fp
   80bdc:	df000017 	ldw	fp,0(sp)
   80be0:	dec00104 	addi	sp,sp,4
   80be4:	f800283a 	ret

00080be8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80be8:	defffe04 	addi	sp,sp,-8
   80bec:	dfc00115 	stw	ra,4(sp)
   80bf0:	df000015 	stw	fp,0(sp)
   80bf4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80bf8:	01800234 	movhi	r6,8
   80bfc:	318ae004 	addi	r6,r6,11136
   80c00:	01400234 	movhi	r5,8
   80c04:	29494b04 	addi	r5,r5,9516
   80c08:	01000234 	movhi	r4,8
   80c0c:	210ae004 	addi	r4,r4,11136
   80c10:	0080b800 	call	80b80 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   80c14:	01800234 	movhi	r6,8
   80c18:	31800804 	addi	r6,r6,32
   80c1c:	01400234 	movhi	r5,8
   80c20:	29400804 	addi	r5,r5,32
   80c24:	01000234 	movhi	r4,8
   80c28:	21000804 	addi	r4,r4,32
   80c2c:	0080b800 	call	80b80 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80c30:	01800234 	movhi	r6,8
   80c34:	31894b04 	addi	r6,r6,9516
   80c38:	01400234 	movhi	r5,8
   80c3c:	29493304 	addi	r5,r5,9420
   80c40:	01000234 	movhi	r4,8
   80c44:	21093304 	addi	r4,r4,9420
   80c48:	0080b800 	call	80b80 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   80c4c:	0081d340 	call	81d34 <alt_dcache_flush_all>
  alt_icache_flush_all();
   80c50:	0081fb00 	call	81fb0 <alt_icache_flush_all>
}
   80c54:	0001883a 	nop
   80c58:	e037883a 	mov	sp,fp
   80c5c:	dfc00117 	ldw	ra,4(sp)
   80c60:	df000017 	ldw	fp,0(sp)
   80c64:	dec00204 	addi	sp,sp,8
   80c68:	f800283a 	ret

00080c6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80c6c:	defffd04 	addi	sp,sp,-12
   80c70:	dfc00215 	stw	ra,8(sp)
   80c74:	df000115 	stw	fp,4(sp)
   80c78:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80c7c:	0009883a 	mov	r4,zero
   80c80:	0080d000 	call	80d00 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   80c84:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80c88:	0080d380 	call	80d38 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   80c8c:	0081e600 	call	81e60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   80c90:	01000234 	movhi	r4,8
   80c94:	2107b004 	addi	r4,r4,7872
   80c98:	00820780 	call	82078 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80c9c:	d0a1a517 	ldw	r2,-31084(gp)
   80ca0:	d0e1a617 	ldw	r3,-31080(gp)
   80ca4:	d121a717 	ldw	r4,-31076(gp)
   80ca8:	200d883a 	mov	r6,r4
   80cac:	180b883a 	mov	r5,r3
   80cb0:	1009883a 	mov	r4,r2
   80cb4:	00809080 	call	80908 <main>
   80cb8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   80cbc:	01000044 	movi	r4,1
   80cc0:	0081c5c0 	call	81c5c <close>
  exit (result);
   80cc4:	e13fff17 	ldw	r4,-4(fp)
   80cc8:	008208c0 	call	8208c <exit>

00080ccc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   80ccc:	defffd04 	addi	sp,sp,-12
   80cd0:	dfc00215 	stw	ra,8(sp)
   80cd4:	df000115 	stw	fp,4(sp)
   80cd8:	df000104 	addi	fp,sp,4
   80cdc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80ce0:	d1600404 	addi	r5,gp,-32752
   80ce4:	e13fff17 	ldw	r4,-4(fp)
   80ce8:	0081dbc0 	call	81dbc <alt_dev_llist_insert>
}
   80cec:	e037883a 	mov	sp,fp
   80cf0:	dfc00117 	ldw	ra,4(sp)
   80cf4:	df000017 	ldw	fp,0(sp)
   80cf8:	dec00204 	addi	sp,sp,8
   80cfc:	f800283a 	ret

00080d00 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80d00:	defffd04 	addi	sp,sp,-12
   80d04:	dfc00215 	stw	ra,8(sp)
   80d08:	df000115 	stw	fp,4(sp)
   80d0c:	df000104 	addi	fp,sp,4
   80d10:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   80d14:	00820540 	call	82054 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80d18:	00800044 	movi	r2,1
   80d1c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80d20:	0001883a 	nop
   80d24:	e037883a 	mov	sp,fp
   80d28:	dfc00117 	ldw	ra,4(sp)
   80d2c:	df000017 	ldw	fp,0(sp)
   80d30:	dec00204 	addi	sp,sp,8
   80d34:	f800283a 	ret

00080d38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80d38:	defffe04 	addi	sp,sp,-8
   80d3c:	dfc00115 	stw	ra,4(sp)
   80d40:	df000015 	stw	fp,0(sp)
   80d44:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   80d48:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_CONFIG, audio_config);
   80d4c:	01000234 	movhi	r4,8
   80d50:	21094b04 	addi	r4,r4,9516
   80d54:	0080ccc0 	call	80ccc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_CODEC, audio_codec);
   80d58:	01000234 	movhi	r4,8
   80d5c:	21095704 	addi	r4,r4,9564
   80d60:	0080ccc0 	call	80ccc <alt_dev_reg>
}
   80d64:	0001883a 	nop
   80d68:	e037883a 	mov	sp,fp
   80d6c:	dfc00117 	ldw	ra,4(sp)
   80d70:	df000017 	ldw	fp,0(sp)
   80d74:	dec00204 	addi	sp,sp,8
   80d78:	f800283a 	ret

00080d7c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
   80d7c:	defffc04 	addi	sp,sp,-16
   80d80:	dfc00315 	stw	ra,12(sp)
   80d84:	df000215 	stw	fp,8(sp)
   80d88:	df000204 	addi	fp,sp,8
   80d8c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
   80d90:	d1600404 	addi	r5,gp,-32752
   80d94:	e13fff17 	ldw	r4,-4(fp)
   80d98:	0081f200 	call	81f20 <alt_find_dev>
   80d9c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
   80da0:	e0bffe17 	ldw	r2,-8(fp)
}
   80da4:	e037883a 	mov	sp,fp
   80da8:	dfc00117 	ldw	ra,4(sp)
   80dac:	df000017 	ldw	fp,0(sp)
   80db0:	dec00204 	addi	sp,sp,8
   80db4:	f800283a 	ret

00080db8 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
   80db8:	defffd04 	addi	sp,sp,-12
   80dbc:	df000215 	stw	fp,8(sp)
   80dc0:	df000204 	addi	fp,sp,8
   80dc4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   80dc8:	e0bfff17 	ldw	r2,-4(fp)
   80dcc:	10800a17 	ldw	r2,40(r2)
   80dd0:	10800037 	ldwio	r2,0(r2)
   80dd4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
   80dd8:	e0bffe17 	ldw	r2,-8(fp)
   80ddc:	10800054 	ori	r2,r2,1
   80de0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   80de4:	e0bfff17 	ldw	r2,-4(fp)
   80de8:	10800a17 	ldw	r2,40(r2)
   80dec:	1007883a 	mov	r3,r2
   80df0:	e0bffe17 	ldw	r2,-8(fp)
   80df4:	18800035 	stwio	r2,0(r3)
}
   80df8:	0001883a 	nop
   80dfc:	e037883a 	mov	sp,fp
   80e00:	df000017 	ldw	fp,0(sp)
   80e04:	dec00104 	addi	sp,sp,4
   80e08:	f800283a 	ret

00080e0c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
   80e0c:	defffd04 	addi	sp,sp,-12
   80e10:	df000215 	stw	fp,8(sp)
   80e14:	df000204 	addi	fp,sp,8
   80e18:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   80e1c:	e0bfff17 	ldw	r2,-4(fp)
   80e20:	10800a17 	ldw	r2,40(r2)
   80e24:	10800037 	ldwio	r2,0(r2)
   80e28:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
   80e2c:	e0fffe17 	ldw	r3,-8(fp)
   80e30:	00bfff84 	movi	r2,-2
   80e34:	1884703a 	and	r2,r3,r2
   80e38:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   80e3c:	e0bfff17 	ldw	r2,-4(fp)
   80e40:	10800a17 	ldw	r2,40(r2)
   80e44:	1007883a 	mov	r3,r2
   80e48:	e0bffe17 	ldw	r2,-8(fp)
   80e4c:	18800035 	stwio	r2,0(r3)
}
   80e50:	0001883a 	nop
   80e54:	e037883a 	mov	sp,fp
   80e58:	df000017 	ldw	fp,0(sp)
   80e5c:	dec00104 	addi	sp,sp,4
   80e60:	f800283a 	ret

00080e64 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
   80e64:	defffd04 	addi	sp,sp,-12
   80e68:	df000215 	stw	fp,8(sp)
   80e6c:	df000204 	addi	fp,sp,8
   80e70:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   80e74:	e0bfff17 	ldw	r2,-4(fp)
   80e78:	10800a17 	ldw	r2,40(r2)
   80e7c:	10800037 	ldwio	r2,0(r2)
   80e80:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
   80e84:	e0bffe17 	ldw	r2,-8(fp)
   80e88:	10800094 	ori	r2,r2,2
   80e8c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   80e90:	e0bfff17 	ldw	r2,-4(fp)
   80e94:	10800a17 	ldw	r2,40(r2)
   80e98:	1007883a 	mov	r3,r2
   80e9c:	e0bffe17 	ldw	r2,-8(fp)
   80ea0:	18800035 	stwio	r2,0(r3)
}
   80ea4:	0001883a 	nop
   80ea8:	e037883a 	mov	sp,fp
   80eac:	df000017 	ldw	fp,0(sp)
   80eb0:	dec00104 	addi	sp,sp,4
   80eb4:	f800283a 	ret

00080eb8 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
   80eb8:	defffd04 	addi	sp,sp,-12
   80ebc:	df000215 	stw	fp,8(sp)
   80ec0:	df000204 	addi	fp,sp,8
   80ec4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   80ec8:	e0bfff17 	ldw	r2,-4(fp)
   80ecc:	10800a17 	ldw	r2,40(r2)
   80ed0:	10800037 	ldwio	r2,0(r2)
   80ed4:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
   80ed8:	e0fffe17 	ldw	r3,-8(fp)
   80edc:	00bfff44 	movi	r2,-3
   80ee0:	1884703a 	and	r2,r3,r2
   80ee4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   80ee8:	e0bfff17 	ldw	r2,-4(fp)
   80eec:	10800a17 	ldw	r2,40(r2)
   80ef0:	1007883a 	mov	r3,r2
   80ef4:	e0bffe17 	ldw	r2,-8(fp)
   80ef8:	18800035 	stwio	r2,0(r3)
}
   80efc:	0001883a 	nop
   80f00:	e037883a 	mov	sp,fp
   80f04:	df000017 	ldw	fp,0(sp)
   80f08:	dec00104 	addi	sp,sp,4
   80f0c:	f800283a 	ret

00080f10 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
   80f10:	defffd04 	addi	sp,sp,-12
   80f14:	df000215 	stw	fp,8(sp)
   80f18:	df000204 	addi	fp,sp,8
   80f1c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   80f20:	e0bfff17 	ldw	r2,-4(fp)
   80f24:	10800a17 	ldw	r2,40(r2)
   80f28:	10800037 	ldwio	r2,0(r2)
   80f2c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
   80f30:	e0bffe17 	ldw	r2,-8(fp)
   80f34:	1080400c 	andi	r2,r2,256
   80f38:	1004c03a 	cmpne	r2,r2,zero
   80f3c:	10803fcc 	andi	r2,r2,255
}
   80f40:	e037883a 	mov	sp,fp
   80f44:	df000017 	ldw	fp,0(sp)
   80f48:	dec00104 	addi	sp,sp,4
   80f4c:	f800283a 	ret

00080f50 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
   80f50:	defffd04 	addi	sp,sp,-12
   80f54:	df000215 	stw	fp,8(sp)
   80f58:	df000204 	addi	fp,sp,8
   80f5c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   80f60:	e0bfff17 	ldw	r2,-4(fp)
   80f64:	10800a17 	ldw	r2,40(r2)
   80f68:	10800037 	ldwio	r2,0(r2)
   80f6c:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
   80f70:	e0bffe17 	ldw	r2,-8(fp)
   80f74:	1080800c 	andi	r2,r2,512
   80f78:	1004c03a 	cmpne	r2,r2,zero
   80f7c:	10803fcc 	andi	r2,r2,255
}
   80f80:	e037883a 	mov	sp,fp
   80f84:	df000017 	ldw	fp,0(sp)
   80f88:	dec00104 	addi	sp,sp,4
   80f8c:	f800283a 	ret

00080f90 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
   80f90:	defffd04 	addi	sp,sp,-12
   80f94:	df000215 	stw	fp,8(sp)
   80f98:	df000204 	addi	fp,sp,8
   80f9c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   80fa0:	e0bfff17 	ldw	r2,-4(fp)
   80fa4:	10800a17 	ldw	r2,40(r2)
   80fa8:	10800037 	ldwio	r2,0(r2)
   80fac:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
   80fb0:	e0bffe17 	ldw	r2,-8(fp)
   80fb4:	10800114 	ori	r2,r2,4
   80fb8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
   80fbc:	e0bffe17 	ldw	r2,-8(fp)
   80fc0:	10800214 	ori	r2,r2,8
   80fc4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   80fc8:	e0bfff17 	ldw	r2,-4(fp)
   80fcc:	10800a17 	ldw	r2,40(r2)
   80fd0:	1007883a 	mov	r3,r2
   80fd4:	e0bffe17 	ldw	r2,-8(fp)
   80fd8:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
   80fdc:	e0fffe17 	ldw	r3,-8(fp)
   80fe0:	00bffec4 	movi	r2,-5
   80fe4:	1884703a 	and	r2,r3,r2
   80fe8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
   80fec:	e0fffe17 	ldw	r3,-8(fp)
   80ff0:	00bffdc4 	movi	r2,-9
   80ff4:	1884703a 	and	r2,r3,r2
   80ff8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   80ffc:	e0bfff17 	ldw	r2,-4(fp)
   81000:	10800a17 	ldw	r2,40(r2)
   81004:	1007883a 	mov	r3,r2
   81008:	e0bffe17 	ldw	r2,-8(fp)
   8100c:	18800035 	stwio	r2,0(r3)
}
   81010:	0001883a 	nop
   81014:	e037883a 	mov	sp,fp
   81018:	df000017 	ldw	fp,0(sp)
   8101c:	dec00104 	addi	sp,sp,4
   81020:	f800283a 	ret

00081024 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
   81024:	defffc04 	addi	sp,sp,-16
   81028:	df000315 	stw	fp,12(sp)
   8102c:	df000304 	addi	fp,sp,12
   81030:	e13ffe15 	stw	r4,-8(fp)
   81034:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   81038:	e0bffe17 	ldw	r2,-8(fp)
   8103c:	10800a17 	ldw	r2,40(r2)
   81040:	10800104 	addi	r2,r2,4
   81044:	10800037 	ldwio	r2,0(r2)
   81048:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
   8104c:	e0bfff17 	ldw	r2,-4(fp)
   81050:	1000041e 	bne	r2,zero,81064 <alt_up_audio_read_fifo_avail+0x40>
   81054:	e0bffd17 	ldw	r2,-12(fp)
   81058:	10bfc00c 	andi	r2,r2,65280
   8105c:	1004d23a 	srli	r2,r2,8
   81060:	00000206 	br	8106c <alt_up_audio_read_fifo_avail+0x48>
   81064:	e0bffd17 	ldw	r2,-12(fp)
   81068:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   8106c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
   81070:	e0bffd17 	ldw	r2,-12(fp)
}
   81074:	e037883a 	mov	sp,fp
   81078:	df000017 	ldw	fp,0(sp)
   8107c:	dec00104 	addi	sp,sp,4
   81080:	f800283a 	ret

00081084 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   81084:	defffa04 	addi	sp,sp,-24
   81088:	dfc00515 	stw	ra,20(sp)
   8108c:	df000415 	stw	fp,16(sp)
   81090:	df000404 	addi	fp,sp,16
   81094:	e13ffd15 	stw	r4,-12(fp)
   81098:	e17ffe15 	stw	r5,-8(fp)
   8109c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
   810a0:	01400044 	movi	r5,1
   810a4:	e13ffd17 	ldw	r4,-12(fp)
   810a8:	00810240 	call	81024 <alt_up_audio_read_fifo_avail>
   810ac:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   810b0:	e0bffc17 	ldw	r2,-16(fp)
   810b4:	10801868 	cmpgeui	r2,r2,97
   810b8:	1000021e 	bne	r2,zero,810c4 <alt_up_audio_record_r+0x40>
		return 0;
   810bc:	0005883a 	mov	r2,zero
   810c0:	00000506 	br	810d8 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   810c4:	01c00044 	movi	r7,1
   810c8:	e1bfff17 	ldw	r6,-4(fp)
   810cc:	e17ffe17 	ldw	r5,-8(fp)
   810d0:	e13ffd17 	ldw	r4,-12(fp)
   810d4:	00812840 	call	81284 <alt_up_audio_read_fifo>
}
   810d8:	e037883a 	mov	sp,fp
   810dc:	dfc00117 	ldw	ra,4(sp)
   810e0:	df000017 	ldw	fp,0(sp)
   810e4:	dec00204 	addi	sp,sp,8
   810e8:	f800283a 	ret

000810ec <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   810ec:	defffa04 	addi	sp,sp,-24
   810f0:	dfc00515 	stw	ra,20(sp)
   810f4:	df000415 	stw	fp,16(sp)
   810f8:	df000404 	addi	fp,sp,16
   810fc:	e13ffd15 	stw	r4,-12(fp)
   81100:	e17ffe15 	stw	r5,-8(fp)
   81104:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
   81108:	000b883a 	mov	r5,zero
   8110c:	e13ffd17 	ldw	r4,-12(fp)
   81110:	00810240 	call	81024 <alt_up_audio_read_fifo_avail>
   81114:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   81118:	e0bffc17 	ldw	r2,-16(fp)
   8111c:	10801868 	cmpgeui	r2,r2,97
   81120:	1000021e 	bne	r2,zero,8112c <alt_up_audio_record_l+0x40>
		return 0;
   81124:	0005883a 	mov	r2,zero
   81128:	00000506 	br	81140 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   8112c:	000f883a 	mov	r7,zero
   81130:	e1bfff17 	ldw	r6,-4(fp)
   81134:	e17ffe17 	ldw	r5,-8(fp)
   81138:	e13ffd17 	ldw	r4,-12(fp)
   8113c:	00812840 	call	81284 <alt_up_audio_read_fifo>
}
   81140:	e037883a 	mov	sp,fp
   81144:	dfc00117 	ldw	ra,4(sp)
   81148:	df000017 	ldw	fp,0(sp)
   8114c:	dec00204 	addi	sp,sp,8
   81150:	f800283a 	ret

00081154 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
   81154:	defffc04 	addi	sp,sp,-16
   81158:	df000315 	stw	fp,12(sp)
   8115c:	df000304 	addi	fp,sp,12
   81160:	e13ffe15 	stw	r4,-8(fp)
   81164:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   81168:	e0bffe17 	ldw	r2,-8(fp)
   8116c:	10800a17 	ldw	r2,40(r2)
   81170:	10800104 	addi	r2,r2,4
   81174:	10800037 	ldwio	r2,0(r2)
   81178:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   8117c:	e0bfff17 	ldw	r2,-4(fp)
   81180:	1000031e 	bne	r2,zero,81190 <alt_up_audio_write_fifo_space+0x3c>
   81184:	e0bffd17 	ldw	r2,-12(fp)
   81188:	1004d63a 	srli	r2,r2,24
   8118c:	00000306 	br	8119c <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   81190:	e0bffd17 	ldw	r2,-12(fp)
   81194:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   81198:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   8119c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
   811a0:	e0bffd17 	ldw	r2,-12(fp)
}
   811a4:	e037883a 	mov	sp,fp
   811a8:	df000017 	ldw	fp,0(sp)
   811ac:	dec00104 	addi	sp,sp,4
   811b0:	f800283a 	ret

000811b4 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   811b4:	defffa04 	addi	sp,sp,-24
   811b8:	dfc00515 	stw	ra,20(sp)
   811bc:	df000415 	stw	fp,16(sp)
   811c0:	df000404 	addi	fp,sp,16
   811c4:	e13ffd15 	stw	r4,-12(fp)
   811c8:	e17ffe15 	stw	r5,-8(fp)
   811cc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
   811d0:	01400044 	movi	r5,1
   811d4:	e13ffd17 	ldw	r4,-12(fp)
   811d8:	00811540 	call	81154 <alt_up_audio_write_fifo_space>
   811dc:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   811e0:	e0bffc17 	ldw	r2,-16(fp)
   811e4:	10801868 	cmpgeui	r2,r2,97
   811e8:	1000021e 	bne	r2,zero,811f4 <alt_up_audio_play_r+0x40>
		return 0;
   811ec:	0005883a 	mov	r2,zero
   811f0:	00000506 	br	81208 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   811f4:	01c00044 	movi	r7,1
   811f8:	e1bfff17 	ldw	r6,-4(fp)
   811fc:	e17ffe17 	ldw	r5,-8(fp)
   81200:	e13ffd17 	ldw	r4,-12(fp)
   81204:	00813640 	call	81364 <alt_up_audio_write_fifo>
}
   81208:	e037883a 	mov	sp,fp
   8120c:	dfc00117 	ldw	ra,4(sp)
   81210:	df000017 	ldw	fp,0(sp)
   81214:	dec00204 	addi	sp,sp,8
   81218:	f800283a 	ret

0008121c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   8121c:	defffa04 	addi	sp,sp,-24
   81220:	dfc00515 	stw	ra,20(sp)
   81224:	df000415 	stw	fp,16(sp)
   81228:	df000404 	addi	fp,sp,16
   8122c:	e13ffd15 	stw	r4,-12(fp)
   81230:	e17ffe15 	stw	r5,-8(fp)
   81234:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
   81238:	000b883a 	mov	r5,zero
   8123c:	e13ffd17 	ldw	r4,-12(fp)
   81240:	00811540 	call	81154 <alt_up_audio_write_fifo_space>
   81244:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   81248:	e0bffc17 	ldw	r2,-16(fp)
   8124c:	10801868 	cmpgeui	r2,r2,97
   81250:	1000021e 	bne	r2,zero,8125c <alt_up_audio_play_l+0x40>
		return 0;
   81254:	0005883a 	mov	r2,zero
   81258:	00000506 	br	81270 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   8125c:	000f883a 	mov	r7,zero
   81260:	e1bfff17 	ldw	r6,-4(fp)
   81264:	e17ffe17 	ldw	r5,-8(fp)
   81268:	e13ffd17 	ldw	r4,-12(fp)
   8126c:	00813640 	call	81364 <alt_up_audio_write_fifo>
}
   81270:	e037883a 	mov	sp,fp
   81274:	dfc00117 	ldw	ra,4(sp)
   81278:	df000017 	ldw	fp,0(sp)
   8127c:	dec00204 	addi	sp,sp,8
   81280:	f800283a 	ret

00081284 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   81284:	defff904 	addi	sp,sp,-28
   81288:	df000615 	stw	fp,24(sp)
   8128c:	df000604 	addi	fp,sp,24
   81290:	e13ffc15 	stw	r4,-16(fp)
   81294:	e17ffd15 	stw	r5,-12(fp)
   81298:	e1bffe15 	stw	r6,-8(fp)
   8129c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   812a0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   812a4:	00002506 	br	8133c <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   812a8:	e0bffc17 	ldw	r2,-16(fp)
   812ac:	10800a17 	ldw	r2,40(r2)
   812b0:	10800104 	addi	r2,r2,4
   812b4:	10800037 	ldwio	r2,0(r2)
   812b8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
   812bc:	e0bfff17 	ldw	r2,-4(fp)
   812c0:	1000041e 	bne	r2,zero,812d4 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
   812c4:	e0bffb17 	ldw	r2,-20(fp)
   812c8:	10bfc00c 	andi	r2,r2,65280
			:
   812cc:	1004d23a 	srli	r2,r2,8
   812d0:	00000206 	br	812dc <alt_up_audio_read_fifo+0x58>
   812d4:	e0bffb17 	ldw	r2,-20(fp)
   812d8:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   812dc:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
   812e0:	e0bffb17 	ldw	r2,-20(fp)
   812e4:	10001926 	beq	r2,zero,8134c <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   812e8:	e0bffa17 	ldw	r2,-24(fp)
   812ec:	1085883a 	add	r2,r2,r2
   812f0:	1085883a 	add	r2,r2,r2
   812f4:	1007883a 	mov	r3,r2
   812f8:	e0bffd17 	ldw	r2,-12(fp)
   812fc:	10c5883a 	add	r2,r2,r3
   81300:	e0ffff17 	ldw	r3,-4(fp)
   81304:	1800051e 	bne	r3,zero,8131c <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   81308:	e0fffc17 	ldw	r3,-16(fp)
   8130c:	18c00a17 	ldw	r3,40(r3)
   81310:	18c00204 	addi	r3,r3,8
   81314:	18c00037 	ldwio	r3,0(r3)
   81318:	00000406 	br	8132c <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
   8131c:	e0fffc17 	ldw	r3,-16(fp)
   81320:	18c00a17 	ldw	r3,40(r3)
   81324:	18c00304 	addi	r3,r3,12
   81328:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   8132c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
   81330:	e0bffa17 	ldw	r2,-24(fp)
   81334:	10800044 	addi	r2,r2,1
   81338:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   8133c:	e0fffa17 	ldw	r3,-24(fp)
   81340:	e0bffe17 	ldw	r2,-8(fp)
   81344:	18bfd816 	blt	r3,r2,812a8 <__alt_data_end+0xfff95418>
   81348:	00000106 	br	81350 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
   8134c:	0001883a 	nop
		}
	}
	return count;
   81350:	e0bffa17 	ldw	r2,-24(fp)
}
   81354:	e037883a 	mov	sp,fp
   81358:	df000017 	ldw	fp,0(sp)
   8135c:	dec00104 	addi	sp,sp,4
   81360:	f800283a 	ret

00081364 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   81364:	defff904 	addi	sp,sp,-28
   81368:	df000615 	stw	fp,24(sp)
   8136c:	df000604 	addi	fp,sp,24
   81370:	e13ffc15 	stw	r4,-16(fp)
   81374:	e17ffd15 	stw	r5,-12(fp)
   81378:	e1bffe15 	stw	r6,-8(fp)
   8137c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   81380:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   81384:	00002f06 	br	81444 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   81388:	e0bffc17 	ldw	r2,-16(fp)
   8138c:	10800a17 	ldw	r2,40(r2)
   81390:	10800104 	addi	r2,r2,4
   81394:	10800037 	ldwio	r2,0(r2)
   81398:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   8139c:	e0bfff17 	ldw	r2,-4(fp)
   813a0:	1000031e 	bne	r2,zero,813b0 <alt_up_audio_write_fifo+0x4c>
   813a4:	e0bffb17 	ldw	r2,-20(fp)
   813a8:	1004d63a 	srli	r2,r2,24
   813ac:	00000306 	br	813bc <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   813b0:	e0bffb17 	ldw	r2,-20(fp)
   813b4:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   813b8:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   813bc:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
   813c0:	e0bffb17 	ldw	r2,-20(fp)
   813c4:	10002326 	beq	r2,zero,81454 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
   813c8:	e0bfff17 	ldw	r2,-4(fp)
   813cc:	10000f1e 	bne	r2,zero,8140c <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
   813d0:	e0bffc17 	ldw	r2,-16(fp)
   813d4:	10800a17 	ldw	r2,40(r2)
   813d8:	10800204 	addi	r2,r2,8
   813dc:	1009883a 	mov	r4,r2
   813e0:	e0bffa17 	ldw	r2,-24(fp)
   813e4:	10c00044 	addi	r3,r2,1
   813e8:	e0fffa15 	stw	r3,-24(fp)
   813ec:	1085883a 	add	r2,r2,r2
   813f0:	1085883a 	add	r2,r2,r2
   813f4:	1007883a 	mov	r3,r2
   813f8:	e0bffd17 	ldw	r2,-12(fp)
   813fc:	10c5883a 	add	r2,r2,r3
   81400:	10800017 	ldw	r2,0(r2)
   81404:	20800035 	stwio	r2,0(r4)
   81408:	00000e06 	br	81444 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
   8140c:	e0bffc17 	ldw	r2,-16(fp)
   81410:	10800a17 	ldw	r2,40(r2)
   81414:	10800304 	addi	r2,r2,12
   81418:	1009883a 	mov	r4,r2
   8141c:	e0bffa17 	ldw	r2,-24(fp)
   81420:	10c00044 	addi	r3,r2,1
   81424:	e0fffa15 	stw	r3,-24(fp)
   81428:	1085883a 	add	r2,r2,r2
   8142c:	1085883a 	add	r2,r2,r2
   81430:	1007883a 	mov	r3,r2
   81434:	e0bffd17 	ldw	r2,-12(fp)
   81438:	10c5883a 	add	r2,r2,r3
   8143c:	10800017 	ldw	r2,0(r2)
   81440:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   81444:	e0fffa17 	ldw	r3,-24(fp)
   81448:	e0bffe17 	ldw	r2,-8(fp)
   8144c:	18bfce16 	blt	r3,r2,81388 <__alt_data_end+0xfff954f8>
   81450:	00000106 	br	81458 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
   81454:	0001883a 	nop
		}
	}
	return count;
   81458:	e0bffa17 	ldw	r2,-24(fp)
}
   8145c:	e037883a 	mov	sp,fp
   81460:	df000017 	ldw	fp,0(sp)
   81464:	dec00104 	addi	sp,sp,4
   81468:	f800283a 	ret

0008146c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
   8146c:	defffd04 	addi	sp,sp,-12
   81470:	df000215 	stw	fp,8(sp)
   81474:	df000204 	addi	fp,sp,8
   81478:	e13ffe15 	stw	r4,-8(fp)
   8147c:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   81480:	e0bfff17 	ldw	r2,-4(fp)
   81484:	1000051e 	bne	r2,zero,8149c <alt_up_audio_read_fifo_head+0x30>
   81488:	e0bffe17 	ldw	r2,-8(fp)
   8148c:	10800a17 	ldw	r2,40(r2)
   81490:	10800204 	addi	r2,r2,8
   81494:	10800037 	ldwio	r2,0(r2)
   81498:	00000406 	br	814ac <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
   8149c:	e0bffe17 	ldw	r2,-8(fp)
   814a0:	10800a17 	ldw	r2,40(r2)
   814a4:	10800304 	addi	r2,r2,12
   814a8:	10800037 	ldwio	r2,0(r2)
}
   814ac:	e037883a 	mov	sp,fp
   814b0:	df000017 	ldw	fp,0(sp)
   814b4:	dec00104 	addi	sp,sp,4
   814b8:	f800283a 	ret

000814bc <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
   814bc:	defffc04 	addi	sp,sp,-16
   814c0:	df000315 	stw	fp,12(sp)
   814c4:	df000304 	addi	fp,sp,12
   814c8:	e13ffd15 	stw	r4,-12(fp)
   814cc:	e17ffe15 	stw	r5,-8(fp)
   814d0:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
   814d4:	e0bfff17 	ldw	r2,-4(fp)
   814d8:	1000071e 	bne	r2,zero,814f8 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
   814dc:	e0bffd17 	ldw	r2,-12(fp)
   814e0:	10800a17 	ldw	r2,40(r2)
   814e4:	10800204 	addi	r2,r2,8
   814e8:	1007883a 	mov	r3,r2
   814ec:	e0bffe17 	ldw	r2,-8(fp)
   814f0:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
   814f4:	00000606 	br	81510 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
   814f8:	e0bffd17 	ldw	r2,-12(fp)
   814fc:	10800a17 	ldw	r2,40(r2)
   81500:	10800304 	addi	r2,r2,12
   81504:	1007883a 	mov	r3,r2
   81508:	e0bffe17 	ldw	r2,-8(fp)
   8150c:	18800035 	stwio	r2,0(r3)
}
   81510:	0001883a 	nop
   81514:	e037883a 	mov	sp,fp
   81518:	df000017 	ldw	fp,0(sp)
   8151c:	dec00104 	addi	sp,sp,4
   81520:	f800283a 	ret

00081524 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
   81524:	defffc04 	addi	sp,sp,-16
   81528:	dfc00315 	stw	ra,12(sp)
   8152c:	df000215 	stw	fp,8(sp)
   81530:	df000204 	addi	fp,sp,8
   81534:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
   81538:	d1600404 	addi	r5,gp,-32752
   8153c:	e13fff17 	ldw	r4,-4(fp)
   81540:	0081f200 	call	81f20 <alt_find_dev>
   81544:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
   81548:	e0bffe17 	ldw	r2,-8(fp)
   8154c:	10800a17 	ldw	r2,40(r2)
   81550:	10800104 	addi	r2,r2,4
   81554:	10800037 	ldwio	r2,0(r2)
   81558:	10803fec 	andhi	r2,r2,255
   8155c:	1005d43a 	srai	r2,r2,16
   81560:	1007883a 	mov	r3,r2
   81564:	e0bffe17 	ldw	r2,-8(fp)
   81568:	10c00b15 	stw	r3,44(r2)

  return dev;
   8156c:	e0bffe17 	ldw	r2,-8(fp)
}
   81570:	e037883a 	mov	sp,fp
   81574:	dfc00117 	ldw	ra,4(sp)
   81578:	df000017 	ldw	fp,0(sp)
   8157c:	dec00204 	addi	sp,sp,8
   81580:	f800283a 	ret

00081584 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   81584:	defffc04 	addi	sp,sp,-16
   81588:	df000315 	stw	fp,12(sp)
   8158c:	df000304 	addi	fp,sp,12
   81590:	e13ffd15 	stw	r4,-12(fp)
   81594:	e17ffe15 	stw	r5,-8(fp)
   81598:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   8159c:	e0bffd17 	ldw	r2,-12(fp)
   815a0:	10800a17 	ldw	r2,40(r2)
   815a4:	10800204 	addi	r2,r2,8
   815a8:	1007883a 	mov	r3,r2
   815ac:	e0bffe17 	ldw	r2,-8(fp)
   815b0:	10803fcc 	andi	r2,r2,255
   815b4:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
   815b8:	e0bffd17 	ldw	r2,-12(fp)
   815bc:	10800a17 	ldw	r2,40(r2)
   815c0:	10800304 	addi	r2,r2,12
   815c4:	1007883a 	mov	r3,r2
   815c8:	e0bfff17 	ldw	r2,-4(fp)
   815cc:	10bfffcc 	andi	r2,r2,65535
   815d0:	18800035 	stwio	r2,0(r3)

	return 0;
   815d4:	0005883a 	mov	r2,zero
}
   815d8:	e037883a 	mov	sp,fp
   815dc:	df000017 	ldw	fp,0(sp)
   815e0:	dec00104 	addi	sp,sp,4
   815e4:	f800283a 	ret

000815e8 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
   815e8:	defffb04 	addi	sp,sp,-20
   815ec:	dfc00415 	stw	ra,16(sp)
   815f0:	df000315 	stw	fp,12(sp)
   815f4:	df000304 	addi	fp,sp,12
   815f8:	e13ffd15 	stw	r4,-12(fp)
   815fc:	e17ffe15 	stw	r5,-8(fp)
   81600:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   81604:	e0bffd17 	ldw	r2,-12(fp)
   81608:	10800a17 	ldw	r2,40(r2)
   8160c:	10800204 	addi	r2,r2,8
   81610:	1007883a 	mov	r3,r2
   81614:	e0bffe17 	ldw	r2,-8(fp)
   81618:	10803fcc 	andi	r2,r2,255
   8161c:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
   81620:	e0bffd17 	ldw	r2,-12(fp)
   81624:	10800a17 	ldw	r2,40(r2)
   81628:	10800304 	addi	r2,r2,12
   8162c:	10800037 	ldwio	r2,0(r2)
   81630:	1007883a 	mov	r3,r2
   81634:	e0bfff17 	ldw	r2,-4(fp)
   81638:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
   8163c:	e13ffd17 	ldw	r4,-12(fp)
   81640:	008170c0 	call	8170c <alt_up_av_config_read_acknowledge>
   81644:	10000226 	beq	r2,zero,81650 <alt_up_av_config_read_data+0x68>
		return -1;
   81648:	00bfffc4 	movi	r2,-1
   8164c:	00000106 	br	81654 <alt_up_av_config_read_data+0x6c>

	return 0;
   81650:	0005883a 	mov	r2,zero
}
   81654:	e037883a 	mov	sp,fp
   81658:	dfc00117 	ldw	ra,4(sp)
   8165c:	df000017 	ldw	fp,0(sp)
   81660:	dec00204 	addi	sp,sp,8
   81664:	f800283a 	ret

00081668 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
   81668:	defffe04 	addi	sp,sp,-8
   8166c:	df000115 	stw	fp,4(sp)
   81670:	df000104 	addi	fp,sp,4
   81674:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
   81678:	e0bfff17 	ldw	r2,-4(fp)
   8167c:	10800a17 	ldw	r2,40(r2)
   81680:	1007883a 	mov	r3,r2
   81684:	00800044 	movi	r2,1
   81688:	18800025 	stbio	r2,0(r3)
	return 0;
   8168c:	0005883a 	mov	r2,zero
}
   81690:	e037883a 	mov	sp,fp
   81694:	df000017 	ldw	fp,0(sp)
   81698:	dec00104 	addi	sp,sp,4
   8169c:	f800283a 	ret

000816a0 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
   816a0:	defffe04 	addi	sp,sp,-8
   816a4:	df000115 	stw	fp,4(sp)
   816a8:	df000104 	addi	fp,sp,4
   816ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
   816b0:	e0bfff17 	ldw	r2,-4(fp)
   816b4:	10800a17 	ldw	r2,40(r2)
   816b8:	1007883a 	mov	r3,r2
   816bc:	00800084 	movi	r2,2
   816c0:	18800025 	stbio	r2,0(r3)
	return 0;
   816c4:	0005883a 	mov	r2,zero
}
   816c8:	e037883a 	mov	sp,fp
   816cc:	df000017 	ldw	fp,0(sp)
   816d0:	dec00104 	addi	sp,sp,4
   816d4:	f800283a 	ret

000816d8 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
   816d8:	defffe04 	addi	sp,sp,-8
   816dc:	df000115 	stw	fp,4(sp)
   816e0:	df000104 	addi	fp,sp,4
   816e4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
   816e8:	e0bfff17 	ldw	r2,-4(fp)
   816ec:	10800a17 	ldw	r2,40(r2)
   816f0:	0007883a 	mov	r3,zero
   816f4:	10c00025 	stbio	r3,0(r2)
	return 0;
   816f8:	0005883a 	mov	r2,zero
}
   816fc:	e037883a 	mov	sp,fp
   81700:	df000017 	ldw	fp,0(sp)
   81704:	dec00104 	addi	sp,sp,4
   81708:	f800283a 	ret

0008170c <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
   8170c:	defffe04 	addi	sp,sp,-8
   81710:	df000115 	stw	fp,4(sp)
   81714:	df000104 	addi	fp,sp,4
   81718:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
   8171c:	e0bfff17 	ldw	r2,-4(fp)
   81720:	10800a17 	ldw	r2,40(r2)
   81724:	10800104 	addi	r2,r2,4
   81728:	10800037 	ldwio	r2,0(r2)
   8172c:	1080008c 	andi	r2,r2,2
   81730:	1005d07a 	srai	r2,r2,1
   81734:	10000626 	beq	r2,zero,81750 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
   81738:	e0bfff17 	ldw	r2,-4(fp)
   8173c:	10800a17 	ldw	r2,40(r2)
   81740:	10800104 	addi	r2,r2,4
   81744:	10800037 	ldwio	r2,0(r2)
   81748:	1080004c 	andi	r2,r2,1
   8174c:	00000106 	br	81754 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
   81750:	00bfffc4 	movi	r2,-1
}
   81754:	e037883a 	mov	sp,fp
   81758:	df000017 	ldw	fp,0(sp)
   8175c:	dec00104 	addi	sp,sp,4
   81760:	f800283a 	ret

00081764 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
   81764:	defffe04 	addi	sp,sp,-8
   81768:	df000115 	stw	fp,4(sp)
   8176c:	df000104 	addi	fp,sp,4
   81770:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
   81774:	e0bfff17 	ldw	r2,-4(fp)
   81778:	10800a17 	ldw	r2,40(r2)
   8177c:	10800104 	addi	r2,r2,4
   81780:	10800037 	ldwio	r2,0(r2)
   81784:	1080008c 	andi	r2,r2,2
   81788:	1005d07a 	srai	r2,r2,1
}
   8178c:	e037883a 	mov	sp,fp
   81790:	df000017 	ldw	fp,0(sp)
   81794:	dec00104 	addi	sp,sp,4
   81798:	f800283a 	ret

0008179c <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8179c:	defffa04 	addi	sp,sp,-24
   817a0:	dfc00515 	stw	ra,20(sp)
   817a4:	df000415 	stw	fp,16(sp)
   817a8:	df000404 	addi	fp,sp,16
   817ac:	e13ffd15 	stw	r4,-12(fp)
   817b0:	e17ffe15 	stw	r5,-8(fp)
   817b4:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   817b8:	e0bffd17 	ldw	r2,-12(fp)
   817bc:	10800b17 	ldw	r2,44(r2)
   817c0:	10800060 	cmpeqi	r2,r2,1
   817c4:	10000e1e 	bne	r2,zero,81800 <alt_up_av_config_write_audio_cfg_register+0x64>
   817c8:	e0bffd17 	ldw	r2,-12(fp)
   817cc:	10800b17 	ldw	r2,44(r2)
   817d0:	108000a0 	cmpeqi	r2,r2,2
   817d4:	10000a1e 	bne	r2,zero,81800 <alt_up_av_config_write_audio_cfg_register+0x64>
   817d8:	e0bffd17 	ldw	r2,-12(fp)
   817dc:	10800b17 	ldw	r2,44(r2)
   817e0:	108000e0 	cmpeqi	r2,r2,3
   817e4:	1000061e 	bne	r2,zero,81800 <alt_up_av_config_write_audio_cfg_register+0x64>
   817e8:	e0bffd17 	ldw	r2,-12(fp)
   817ec:	10800b17 	ldw	r2,44(r2)
   817f0:	10800120 	cmpeqi	r2,r2,4
   817f4:	1000021e 	bne	r2,zero,81800 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
   817f8:	00bffa84 	movi	r2,-22
   817fc:	00000b06 	br	8182c <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
   81800:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
   81804:	e0bffd17 	ldw	r2,-12(fp)
   81808:	10800a17 	ldw	r2,40(r2)
   8180c:	10800084 	addi	r2,r2,2
   81810:	1007883a 	mov	r3,r2
   81814:	e0bffc17 	ldw	r2,-16(fp)
   81818:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
   8181c:	e1bfff17 	ldw	r6,-4(fp)
   81820:	e17ffe17 	ldw	r5,-8(fp)
   81824:	e13ffd17 	ldw	r4,-12(fp)
   81828:	00815840 	call	81584 <alt_up_av_config_write_data>
}
   8182c:	e037883a 	mov	sp,fp
   81830:	dfc00117 	ldw	ra,4(sp)
   81834:	df000017 	ldw	fp,0(sp)
   81838:	dec00204 	addi	sp,sp,8
   8183c:	f800283a 	ret

00081840 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
   81840:	defffa04 	addi	sp,sp,-24
   81844:	dfc00515 	stw	ra,20(sp)
   81848:	df000415 	stw	fp,16(sp)
   8184c:	df000404 	addi	fp,sp,16
   81850:	e13ffc15 	stw	r4,-16(fp)
   81854:	e17ffd15 	stw	r5,-12(fp)
   81858:	e1bffe15 	stw	r6,-8(fp)
   8185c:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   81860:	e0bffc17 	ldw	r2,-16(fp)
   81864:	10800b17 	ldw	r2,44(r2)
   81868:	108000a0 	cmpeqi	r2,r2,2
   8186c:	10000a1e 	bne	r2,zero,81898 <alt_up_av_config_read_video_cfg_register+0x58>
   81870:	e0bffc17 	ldw	r2,-16(fp)
   81874:	10800b17 	ldw	r2,44(r2)
   81878:	108000e0 	cmpeqi	r2,r2,3
   8187c:	1000061e 	bne	r2,zero,81898 <alt_up_av_config_read_video_cfg_register+0x58>
   81880:	e0bffc17 	ldw	r2,-16(fp)
   81884:	10800b17 	ldw	r2,44(r2)
   81888:	10800120 	cmpeqi	r2,r2,4
   8188c:	1000021e 	bne	r2,zero,81898 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
   81890:	00bffa84 	movi	r2,-22
   81894:	00001f06 	br	81914 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   81898:	e0bffc17 	ldw	r2,-16(fp)
   8189c:	10800b17 	ldw	r2,44(r2)
   818a0:	108000a0 	cmpeqi	r2,r2,2
   818a4:	1000041e 	bne	r2,zero,818b8 <alt_up_av_config_read_video_cfg_register+0x78>
   818a8:	e0bffc17 	ldw	r2,-16(fp)
   818ac:	10800b17 	ldw	r2,44(r2)
   818b0:	10800118 	cmpnei	r2,r2,4
   818b4:	1000051e 	bne	r2,zero,818cc <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   818b8:	e0bfff17 	ldw	r2,-4(fp)
   818bc:	10800060 	cmpeqi	r2,r2,1
   818c0:	10000a1e 	bne	r2,zero,818ec <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
   818c4:	00bffa84 	movi	r2,-22
   818c8:	00001206 	br	81914 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   818cc:	e0bfff17 	ldw	r2,-4(fp)
   818d0:	10800060 	cmpeqi	r2,r2,1
   818d4:	1000051e 	bne	r2,zero,818ec <alt_up_av_config_read_video_cfg_register+0xac>
   818d8:	e0bfff17 	ldw	r2,-4(fp)
   818dc:	108000a0 	cmpeqi	r2,r2,2
   818e0:	1000021e 	bne	r2,zero,818ec <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
   818e4:	00bffa84 	movi	r2,-22
   818e8:	00000a06 	br	81914 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   818ec:	e0bffc17 	ldw	r2,-16(fp)
   818f0:	10800a17 	ldw	r2,40(r2)
   818f4:	10800084 	addi	r2,r2,2
   818f8:	1007883a 	mov	r3,r2
   818fc:	e0bfff17 	ldw	r2,-4(fp)
   81900:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
   81904:	e1bffe17 	ldw	r6,-8(fp)
   81908:	e17ffd17 	ldw	r5,-12(fp)
   8190c:	e13ffc17 	ldw	r4,-16(fp)
   81910:	00815e80 	call	815e8 <alt_up_av_config_read_data>
}
   81914:	e037883a 	mov	sp,fp
   81918:	dfc00117 	ldw	ra,4(sp)
   8191c:	df000017 	ldw	fp,0(sp)
   81920:	dec00204 	addi	sp,sp,8
   81924:	f800283a 	ret

00081928 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
   81928:	defffa04 	addi	sp,sp,-24
   8192c:	dfc00515 	stw	ra,20(sp)
   81930:	df000415 	stw	fp,16(sp)
   81934:	df000404 	addi	fp,sp,16
   81938:	e13ffc15 	stw	r4,-16(fp)
   8193c:	e17ffd15 	stw	r5,-12(fp)
   81940:	e1bffe15 	stw	r6,-8(fp)
   81944:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   81948:	e0bffc17 	ldw	r2,-16(fp)
   8194c:	10800b17 	ldw	r2,44(r2)
   81950:	108000a0 	cmpeqi	r2,r2,2
   81954:	10000a1e 	bne	r2,zero,81980 <alt_up_av_config_write_video_cfg_register+0x58>
   81958:	e0bffc17 	ldw	r2,-16(fp)
   8195c:	10800b17 	ldw	r2,44(r2)
   81960:	108000e0 	cmpeqi	r2,r2,3
   81964:	1000061e 	bne	r2,zero,81980 <alt_up_av_config_write_video_cfg_register+0x58>
   81968:	e0bffc17 	ldw	r2,-16(fp)
   8196c:	10800b17 	ldw	r2,44(r2)
   81970:	10800120 	cmpeqi	r2,r2,4
   81974:	1000021e 	bne	r2,zero,81980 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
   81978:	00bffa84 	movi	r2,-22
   8197c:	00001f06 	br	819fc <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   81980:	e0bffc17 	ldw	r2,-16(fp)
   81984:	10800b17 	ldw	r2,44(r2)
   81988:	108000a0 	cmpeqi	r2,r2,2
   8198c:	1000041e 	bne	r2,zero,819a0 <alt_up_av_config_write_video_cfg_register+0x78>
   81990:	e0bffc17 	ldw	r2,-16(fp)
   81994:	10800b17 	ldw	r2,44(r2)
   81998:	10800118 	cmpnei	r2,r2,4
   8199c:	1000051e 	bne	r2,zero,819b4 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   819a0:	e0bfff17 	ldw	r2,-4(fp)
   819a4:	10800060 	cmpeqi	r2,r2,1
   819a8:	10000a1e 	bne	r2,zero,819d4 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
   819ac:	00bffa84 	movi	r2,-22
   819b0:	00001206 	br	819fc <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   819b4:	e0bfff17 	ldw	r2,-4(fp)
   819b8:	10800060 	cmpeqi	r2,r2,1
   819bc:	1000051e 	bne	r2,zero,819d4 <alt_up_av_config_write_video_cfg_register+0xac>
   819c0:	e0bfff17 	ldw	r2,-4(fp)
   819c4:	108000a0 	cmpeqi	r2,r2,2
   819c8:	1000021e 	bne	r2,zero,819d4 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
   819cc:	00bffa84 	movi	r2,-22
   819d0:	00000a06 	br	819fc <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   819d4:	e0bffc17 	ldw	r2,-16(fp)
   819d8:	10800a17 	ldw	r2,40(r2)
   819dc:	10800084 	addi	r2,r2,2
   819e0:	1007883a 	mov	r3,r2
   819e4:	e0bfff17 	ldw	r2,-4(fp)
   819e8:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
   819ec:	e1bffe17 	ldw	r6,-8(fp)
   819f0:	e17ffd17 	ldw	r5,-12(fp)
   819f4:	e13ffc17 	ldw	r4,-16(fp)
   819f8:	00815840 	call	81584 <alt_up_av_config_write_data>
}
   819fc:	e037883a 	mov	sp,fp
   81a00:	dfc00117 	ldw	ra,4(sp)
   81a04:	df000017 	ldw	fp,0(sp)
   81a08:	dec00204 	addi	sp,sp,8
   81a0c:	f800283a 	ret

00081a10 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   81a10:	defffb04 	addi	sp,sp,-20
   81a14:	dfc00415 	stw	ra,16(sp)
   81a18:	df000315 	stw	fp,12(sp)
   81a1c:	df000304 	addi	fp,sp,12
   81a20:	e13ffd15 	stw	r4,-12(fp)
   81a24:	e17ffe15 	stw	r5,-8(fp)
   81a28:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   81a2c:	e0bffd17 	ldw	r2,-12(fp)
   81a30:	10800b17 	ldw	r2,44(r2)
   81a34:	10800220 	cmpeqi	r2,r2,8
   81a38:	1000021e 	bne	r2,zero,81a44 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
   81a3c:	00bffa84 	movi	r2,-22
   81a40:	00000406 	br	81a54 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
   81a44:	e1bfff17 	ldw	r6,-4(fp)
   81a48:	e17ffe17 	ldw	r5,-8(fp)
   81a4c:	e13ffd17 	ldw	r4,-12(fp)
   81a50:	00815e80 	call	815e8 <alt_up_av_config_read_data>
}
   81a54:	e037883a 	mov	sp,fp
   81a58:	dfc00117 	ldw	ra,4(sp)
   81a5c:	df000017 	ldw	fp,0(sp)
   81a60:	dec00204 	addi	sp,sp,8
   81a64:	f800283a 	ret

00081a68 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   81a68:	defffb04 	addi	sp,sp,-20
   81a6c:	dfc00415 	stw	ra,16(sp)
   81a70:	df000315 	stw	fp,12(sp)
   81a74:	df000304 	addi	fp,sp,12
   81a78:	e13ffd15 	stw	r4,-12(fp)
   81a7c:	e17ffe15 	stw	r5,-8(fp)
   81a80:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   81a84:	e0bffd17 	ldw	r2,-12(fp)
   81a88:	10800b17 	ldw	r2,44(r2)
   81a8c:	10800220 	cmpeqi	r2,r2,8
   81a90:	1000021e 	bne	r2,zero,81a9c <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
   81a94:	00bffa84 	movi	r2,-22
   81a98:	00000406 	br	81aac <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
   81a9c:	e1bfff17 	ldw	r6,-4(fp)
   81aa0:	e17ffe17 	ldw	r5,-8(fp)
   81aa4:	e13ffd17 	ldw	r4,-12(fp)
   81aa8:	00815840 	call	81584 <alt_up_av_config_write_data>
}
   81aac:	e037883a 	mov	sp,fp
   81ab0:	dfc00117 	ldw	ra,4(sp)
   81ab4:	df000017 	ldw	fp,0(sp)
   81ab8:	dec00204 	addi	sp,sp,8
   81abc:	f800283a 	ret

00081ac0 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   81ac0:	defffb04 	addi	sp,sp,-20
   81ac4:	dfc00415 	stw	ra,16(sp)
   81ac8:	df000315 	stw	fp,12(sp)
   81acc:	df000304 	addi	fp,sp,12
   81ad0:	e13ffd15 	stw	r4,-12(fp)
   81ad4:	e17ffe15 	stw	r5,-8(fp)
   81ad8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   81adc:	e0bffd17 	ldw	r2,-12(fp)
   81ae0:	10800b17 	ldw	r2,44(r2)
   81ae4:	10800260 	cmpeqi	r2,r2,9
   81ae8:	1000021e 	bne	r2,zero,81af4 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
   81aec:	00bffa84 	movi	r2,-22
   81af0:	00000406 	br	81b04 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
   81af4:	e1bfff17 	ldw	r6,-4(fp)
   81af8:	e17ffe17 	ldw	r5,-8(fp)
   81afc:	e13ffd17 	ldw	r4,-12(fp)
   81b00:	00815e80 	call	815e8 <alt_up_av_config_read_data>
}
   81b04:	e037883a 	mov	sp,fp
   81b08:	dfc00117 	ldw	ra,4(sp)
   81b0c:	df000017 	ldw	fp,0(sp)
   81b10:	dec00204 	addi	sp,sp,8
   81b14:	f800283a 	ret

00081b18 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   81b18:	defffb04 	addi	sp,sp,-20
   81b1c:	dfc00415 	stw	ra,16(sp)
   81b20:	df000315 	stw	fp,12(sp)
   81b24:	df000304 	addi	fp,sp,12
   81b28:	e13ffd15 	stw	r4,-12(fp)
   81b2c:	e17ffe15 	stw	r5,-8(fp)
   81b30:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   81b34:	e0bffd17 	ldw	r2,-12(fp)
   81b38:	10800b17 	ldw	r2,44(r2)
   81b3c:	10800260 	cmpeqi	r2,r2,9
   81b40:	1000021e 	bne	r2,zero,81b4c <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
   81b44:	00bffa84 	movi	r2,-22
   81b48:	00000406 	br	81b5c <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
   81b4c:	e1bfff17 	ldw	r6,-4(fp)
   81b50:	e17ffe17 	ldw	r5,-8(fp)
   81b54:	e13ffd17 	ldw	r4,-12(fp)
   81b58:	00815840 	call	81584 <alt_up_av_config_write_data>
}
   81b5c:	e037883a 	mov	sp,fp
   81b60:	dfc00117 	ldw	ra,4(sp)
   81b64:	df000017 	ldw	fp,0(sp)
   81b68:	dec00204 	addi	sp,sp,8
   81b6c:	f800283a 	ret

00081b70 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   81b70:	defffb04 	addi	sp,sp,-20
   81b74:	dfc00415 	stw	ra,16(sp)
   81b78:	df000315 	stw	fp,12(sp)
   81b7c:	df000304 	addi	fp,sp,12
   81b80:	e13ffd15 	stw	r4,-12(fp)
   81b84:	e17ffe15 	stw	r5,-8(fp)
   81b88:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   81b8c:	e0bffd17 	ldw	r2,-12(fp)
   81b90:	10800b17 	ldw	r2,44(r2)
   81b94:	108002a0 	cmpeqi	r2,r2,10
   81b98:	1000021e 	bne	r2,zero,81ba4 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
   81b9c:	00bffa84 	movi	r2,-22
   81ba0:	00000406 	br	81bb4 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
   81ba4:	e1bfff17 	ldw	r6,-4(fp)
   81ba8:	e17ffe17 	ldw	r5,-8(fp)
   81bac:	e13ffd17 	ldw	r4,-12(fp)
   81bb0:	00815e80 	call	815e8 <alt_up_av_config_read_data>
}
   81bb4:	e037883a 	mov	sp,fp
   81bb8:	dfc00117 	ldw	ra,4(sp)
   81bbc:	df000017 	ldw	fp,0(sp)
   81bc0:	dec00204 	addi	sp,sp,8
   81bc4:	f800283a 	ret

00081bc8 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   81bc8:	defffb04 	addi	sp,sp,-20
   81bcc:	dfc00415 	stw	ra,16(sp)
   81bd0:	df000315 	stw	fp,12(sp)
   81bd4:	df000304 	addi	fp,sp,12
   81bd8:	e13ffd15 	stw	r4,-12(fp)
   81bdc:	e17ffe15 	stw	r5,-8(fp)
   81be0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   81be4:	e0bffd17 	ldw	r2,-12(fp)
   81be8:	10800b17 	ldw	r2,44(r2)
   81bec:	108002a0 	cmpeqi	r2,r2,10
   81bf0:	1000021e 	bne	r2,zero,81bfc <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
   81bf4:	00bffa84 	movi	r2,-22
   81bf8:	00000406 	br	81c0c <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
   81bfc:	e1bfff17 	ldw	r6,-4(fp)
   81c00:	e17ffe17 	ldw	r5,-8(fp)
   81c04:	e13ffd17 	ldw	r4,-12(fp)
   81c08:	00815840 	call	81584 <alt_up_av_config_write_data>
}
   81c0c:	e037883a 	mov	sp,fp
   81c10:	dfc00117 	ldw	ra,4(sp)
   81c14:	df000017 	ldw	fp,0(sp)
   81c18:	dec00204 	addi	sp,sp,8
   81c1c:	f800283a 	ret

00081c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81c20:	defffe04 	addi	sp,sp,-8
   81c24:	dfc00115 	stw	ra,4(sp)
   81c28:	df000015 	stw	fp,0(sp)
   81c2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81c30:	d0a00717 	ldw	r2,-32740(gp)
   81c34:	10000326 	beq	r2,zero,81c44 <alt_get_errno+0x24>
   81c38:	d0a00717 	ldw	r2,-32740(gp)
   81c3c:	103ee83a 	callr	r2
   81c40:	00000106 	br	81c48 <alt_get_errno+0x28>
   81c44:	d0a1a804 	addi	r2,gp,-31072
}
   81c48:	e037883a 	mov	sp,fp
   81c4c:	dfc00117 	ldw	ra,4(sp)
   81c50:	df000017 	ldw	fp,0(sp)
   81c54:	dec00204 	addi	sp,sp,8
   81c58:	f800283a 	ret

00081c5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   81c5c:	defffb04 	addi	sp,sp,-20
   81c60:	dfc00415 	stw	ra,16(sp)
   81c64:	df000315 	stw	fp,12(sp)
   81c68:	df000304 	addi	fp,sp,12
   81c6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   81c70:	e0bfff17 	ldw	r2,-4(fp)
   81c74:	10000816 	blt	r2,zero,81c98 <close+0x3c>
   81c78:	01400304 	movi	r5,12
   81c7c:	e13fff17 	ldw	r4,-4(fp)
   81c80:	00824700 	call	82470 <__mulsi3>
   81c84:	1007883a 	mov	r3,r2
   81c88:	00800234 	movhi	r2,8
   81c8c:	10896d04 	addi	r2,r2,9652
   81c90:	1885883a 	add	r2,r3,r2
   81c94:	00000106 	br	81c9c <close+0x40>
   81c98:	0005883a 	mov	r2,zero
   81c9c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   81ca0:	e0bffd17 	ldw	r2,-12(fp)
   81ca4:	10001926 	beq	r2,zero,81d0c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   81ca8:	e0bffd17 	ldw	r2,-12(fp)
   81cac:	10800017 	ldw	r2,0(r2)
   81cb0:	10800417 	ldw	r2,16(r2)
   81cb4:	10000626 	beq	r2,zero,81cd0 <close+0x74>
   81cb8:	e0bffd17 	ldw	r2,-12(fp)
   81cbc:	10800017 	ldw	r2,0(r2)
   81cc0:	10800417 	ldw	r2,16(r2)
   81cc4:	e13ffd17 	ldw	r4,-12(fp)
   81cc8:	103ee83a 	callr	r2
   81ccc:	00000106 	br	81cd4 <close+0x78>
   81cd0:	0005883a 	mov	r2,zero
   81cd4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81cd8:	e13fff17 	ldw	r4,-4(fp)
   81cdc:	0081fd00 	call	81fd0 <alt_release_fd>
    if (rval < 0)
   81ce0:	e0bffe17 	ldw	r2,-8(fp)
   81ce4:	1000070e 	bge	r2,zero,81d04 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   81ce8:	0081c200 	call	81c20 <alt_get_errno>
   81cec:	1007883a 	mov	r3,r2
   81cf0:	e0bffe17 	ldw	r2,-8(fp)
   81cf4:	0085c83a 	sub	r2,zero,r2
   81cf8:	18800015 	stw	r2,0(r3)
      return -1;
   81cfc:	00bfffc4 	movi	r2,-1
   81d00:	00000706 	br	81d20 <close+0xc4>
    }
    return 0;
   81d04:	0005883a 	mov	r2,zero
   81d08:	00000506 	br	81d20 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   81d0c:	0081c200 	call	81c20 <alt_get_errno>
   81d10:	1007883a 	mov	r3,r2
   81d14:	00801444 	movi	r2,81
   81d18:	18800015 	stw	r2,0(r3)
    return -1;
   81d1c:	00bfffc4 	movi	r2,-1
  }
}
   81d20:	e037883a 	mov	sp,fp
   81d24:	dfc00117 	ldw	ra,4(sp)
   81d28:	df000017 	ldw	fp,0(sp)
   81d2c:	dec00204 	addi	sp,sp,8
   81d30:	f800283a 	ret

00081d34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   81d34:	deffff04 	addi	sp,sp,-4
   81d38:	df000015 	stw	fp,0(sp)
   81d3c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   81d40:	0001883a 	nop
   81d44:	e037883a 	mov	sp,fp
   81d48:	df000017 	ldw	fp,0(sp)
   81d4c:	dec00104 	addi	sp,sp,4
   81d50:	f800283a 	ret

00081d54 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   81d54:	defffc04 	addi	sp,sp,-16
   81d58:	df000315 	stw	fp,12(sp)
   81d5c:	df000304 	addi	fp,sp,12
   81d60:	e13ffd15 	stw	r4,-12(fp)
   81d64:	e17ffe15 	stw	r5,-8(fp)
   81d68:	e1bfff15 	stw	r6,-4(fp)
  return len;
   81d6c:	e0bfff17 	ldw	r2,-4(fp)
}
   81d70:	e037883a 	mov	sp,fp
   81d74:	df000017 	ldw	fp,0(sp)
   81d78:	dec00104 	addi	sp,sp,4
   81d7c:	f800283a 	ret

00081d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81d80:	defffe04 	addi	sp,sp,-8
   81d84:	dfc00115 	stw	ra,4(sp)
   81d88:	df000015 	stw	fp,0(sp)
   81d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81d90:	d0a00717 	ldw	r2,-32740(gp)
   81d94:	10000326 	beq	r2,zero,81da4 <alt_get_errno+0x24>
   81d98:	d0a00717 	ldw	r2,-32740(gp)
   81d9c:	103ee83a 	callr	r2
   81da0:	00000106 	br	81da8 <alt_get_errno+0x28>
   81da4:	d0a1a804 	addi	r2,gp,-31072
}
   81da8:	e037883a 	mov	sp,fp
   81dac:	dfc00117 	ldw	ra,4(sp)
   81db0:	df000017 	ldw	fp,0(sp)
   81db4:	dec00204 	addi	sp,sp,8
   81db8:	f800283a 	ret

00081dbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81dbc:	defffa04 	addi	sp,sp,-24
   81dc0:	dfc00515 	stw	ra,20(sp)
   81dc4:	df000415 	stw	fp,16(sp)
   81dc8:	df000404 	addi	fp,sp,16
   81dcc:	e13ffe15 	stw	r4,-8(fp)
   81dd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81dd4:	e0bffe17 	ldw	r2,-8(fp)
   81dd8:	10000326 	beq	r2,zero,81de8 <alt_dev_llist_insert+0x2c>
   81ddc:	e0bffe17 	ldw	r2,-8(fp)
   81de0:	10800217 	ldw	r2,8(r2)
   81de4:	1000061e 	bne	r2,zero,81e00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   81de8:	0081d800 	call	81d80 <alt_get_errno>
   81dec:	1007883a 	mov	r3,r2
   81df0:	00800584 	movi	r2,22
   81df4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   81df8:	00bffa84 	movi	r2,-22
   81dfc:	00001306 	br	81e4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   81e00:	e0bffe17 	ldw	r2,-8(fp)
   81e04:	e0ffff17 	ldw	r3,-4(fp)
   81e08:	e0fffc15 	stw	r3,-16(fp)
   81e0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81e10:	e0bffd17 	ldw	r2,-12(fp)
   81e14:	e0fffc17 	ldw	r3,-16(fp)
   81e18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   81e1c:	e0bffc17 	ldw	r2,-16(fp)
   81e20:	10c00017 	ldw	r3,0(r2)
   81e24:	e0bffd17 	ldw	r2,-12(fp)
   81e28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   81e2c:	e0bffc17 	ldw	r2,-16(fp)
   81e30:	10800017 	ldw	r2,0(r2)
   81e34:	e0fffd17 	ldw	r3,-12(fp)
   81e38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   81e3c:	e0bffc17 	ldw	r2,-16(fp)
   81e40:	e0fffd17 	ldw	r3,-12(fp)
   81e44:	10c00015 	stw	r3,0(r2)

  return 0;  
   81e48:	0005883a 	mov	r2,zero
}
   81e4c:	e037883a 	mov	sp,fp
   81e50:	dfc00117 	ldw	ra,4(sp)
   81e54:	df000017 	ldw	fp,0(sp)
   81e58:	dec00204 	addi	sp,sp,8
   81e5c:	f800283a 	ret

00081e60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   81e60:	defffd04 	addi	sp,sp,-12
   81e64:	dfc00215 	stw	ra,8(sp)
   81e68:	df000115 	stw	fp,4(sp)
   81e6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   81e70:	00800234 	movhi	r2,8
   81e74:	10893204 	addi	r2,r2,9416
   81e78:	e0bfff15 	stw	r2,-4(fp)
   81e7c:	00000606 	br	81e98 <_do_ctors+0x38>
        (*ctor) (); 
   81e80:	e0bfff17 	ldw	r2,-4(fp)
   81e84:	10800017 	ldw	r2,0(r2)
   81e88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   81e8c:	e0bfff17 	ldw	r2,-4(fp)
   81e90:	10bfff04 	addi	r2,r2,-4
   81e94:	e0bfff15 	stw	r2,-4(fp)
   81e98:	e0ffff17 	ldw	r3,-4(fp)
   81e9c:	00800234 	movhi	r2,8
   81ea0:	10893304 	addi	r2,r2,9420
   81ea4:	18bff62e 	bgeu	r3,r2,81e80 <__alt_data_end+0xfff95ff0>
        (*ctor) (); 
}
   81ea8:	0001883a 	nop
   81eac:	e037883a 	mov	sp,fp
   81eb0:	dfc00117 	ldw	ra,4(sp)
   81eb4:	df000017 	ldw	fp,0(sp)
   81eb8:	dec00204 	addi	sp,sp,8
   81ebc:	f800283a 	ret

00081ec0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   81ec0:	defffd04 	addi	sp,sp,-12
   81ec4:	dfc00215 	stw	ra,8(sp)
   81ec8:	df000115 	stw	fp,4(sp)
   81ecc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81ed0:	00800234 	movhi	r2,8
   81ed4:	10893204 	addi	r2,r2,9416
   81ed8:	e0bfff15 	stw	r2,-4(fp)
   81edc:	00000606 	br	81ef8 <_do_dtors+0x38>
        (*dtor) (); 
   81ee0:	e0bfff17 	ldw	r2,-4(fp)
   81ee4:	10800017 	ldw	r2,0(r2)
   81ee8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81eec:	e0bfff17 	ldw	r2,-4(fp)
   81ef0:	10bfff04 	addi	r2,r2,-4
   81ef4:	e0bfff15 	stw	r2,-4(fp)
   81ef8:	e0ffff17 	ldw	r3,-4(fp)
   81efc:	00800234 	movhi	r2,8
   81f00:	10893304 	addi	r2,r2,9420
   81f04:	18bff62e 	bgeu	r3,r2,81ee0 <__alt_data_end+0xfff96050>
        (*dtor) (); 
}
   81f08:	0001883a 	nop
   81f0c:	e037883a 	mov	sp,fp
   81f10:	dfc00117 	ldw	ra,4(sp)
   81f14:	df000017 	ldw	fp,0(sp)
   81f18:	dec00204 	addi	sp,sp,8
   81f1c:	f800283a 	ret

00081f20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   81f20:	defffa04 	addi	sp,sp,-24
   81f24:	dfc00515 	stw	ra,20(sp)
   81f28:	df000415 	stw	fp,16(sp)
   81f2c:	df000404 	addi	fp,sp,16
   81f30:	e13ffe15 	stw	r4,-8(fp)
   81f34:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   81f38:	e0bfff17 	ldw	r2,-4(fp)
   81f3c:	10800017 	ldw	r2,0(r2)
   81f40:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   81f44:	e13ffe17 	ldw	r4,-8(fp)
   81f48:	00821400 	call	82140 <strlen>
   81f4c:	10800044 	addi	r2,r2,1
   81f50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81f54:	00000d06 	br	81f8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   81f58:	e0bffc17 	ldw	r2,-16(fp)
   81f5c:	10800217 	ldw	r2,8(r2)
   81f60:	e0fffd17 	ldw	r3,-12(fp)
   81f64:	180d883a 	mov	r6,r3
   81f68:	e17ffe17 	ldw	r5,-8(fp)
   81f6c:	1009883a 	mov	r4,r2
   81f70:	00820c40 	call	820c4 <memcmp>
   81f74:	1000021e 	bne	r2,zero,81f80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   81f78:	e0bffc17 	ldw	r2,-16(fp)
   81f7c:	00000706 	br	81f9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   81f80:	e0bffc17 	ldw	r2,-16(fp)
   81f84:	10800017 	ldw	r2,0(r2)
   81f88:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81f8c:	e0fffc17 	ldw	r3,-16(fp)
   81f90:	e0bfff17 	ldw	r2,-4(fp)
   81f94:	18bff01e 	bne	r3,r2,81f58 <__alt_data_end+0xfff960c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   81f98:	0005883a 	mov	r2,zero
}
   81f9c:	e037883a 	mov	sp,fp
   81fa0:	dfc00117 	ldw	ra,4(sp)
   81fa4:	df000017 	ldw	fp,0(sp)
   81fa8:	dec00204 	addi	sp,sp,8
   81fac:	f800283a 	ret

00081fb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   81fb0:	deffff04 	addi	sp,sp,-4
   81fb4:	df000015 	stw	fp,0(sp)
   81fb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   81fbc:	0001883a 	nop
   81fc0:	e037883a 	mov	sp,fp
   81fc4:	df000017 	ldw	fp,0(sp)
   81fc8:	dec00104 	addi	sp,sp,4
   81fcc:	f800283a 	ret

00081fd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   81fd0:	defffc04 	addi	sp,sp,-16
   81fd4:	dfc00315 	stw	ra,12(sp)
   81fd8:	df000215 	stw	fp,8(sp)
   81fdc:	dc000115 	stw	r16,4(sp)
   81fe0:	df000204 	addi	fp,sp,8
   81fe4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   81fe8:	e0bffe17 	ldw	r2,-8(fp)
   81fec:	108000d0 	cmplti	r2,r2,3
   81ff0:	1000111e 	bne	r2,zero,82038 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   81ff4:	04000234 	movhi	r16,8
   81ff8:	84096d04 	addi	r16,r16,9652
   81ffc:	e0bffe17 	ldw	r2,-8(fp)
   82000:	01400304 	movi	r5,12
   82004:	1009883a 	mov	r4,r2
   82008:	00824700 	call	82470 <__mulsi3>
   8200c:	8085883a 	add	r2,r16,r2
   82010:	10800204 	addi	r2,r2,8
   82014:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82018:	04000234 	movhi	r16,8
   8201c:	84096d04 	addi	r16,r16,9652
   82020:	e0bffe17 	ldw	r2,-8(fp)
   82024:	01400304 	movi	r5,12
   82028:	1009883a 	mov	r4,r2
   8202c:	00824700 	call	82470 <__mulsi3>
   82030:	8085883a 	add	r2,r16,r2
   82034:	10000015 	stw	zero,0(r2)
  }
}
   82038:	0001883a 	nop
   8203c:	e6ffff04 	addi	sp,fp,-4
   82040:	dfc00217 	ldw	ra,8(sp)
   82044:	df000117 	ldw	fp,4(sp)
   82048:	dc000017 	ldw	r16,0(sp)
   8204c:	dec00304 	addi	sp,sp,12
   82050:	f800283a 	ret

00082054 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   82054:	deffff04 	addi	sp,sp,-4
   82058:	df000015 	stw	fp,0(sp)
   8205c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   82060:	000170fa 	wrctl	ienable,zero
}
   82064:	0001883a 	nop
   82068:	e037883a 	mov	sp,fp
   8206c:	df000017 	ldw	fp,0(sp)
   82070:	dec00104 	addi	sp,sp,4
   82074:	f800283a 	ret

00082078 <atexit>:
   82078:	200b883a 	mov	r5,r4
   8207c:	000f883a 	mov	r7,zero
   82080:	000d883a 	mov	r6,zero
   82084:	0009883a 	mov	r4,zero
   82088:	00821d81 	jmpi	821d8 <__register_exitproc>

0008208c <exit>:
   8208c:	defffe04 	addi	sp,sp,-8
   82090:	000b883a 	mov	r5,zero
   82094:	dc000015 	stw	r16,0(sp)
   82098:	dfc00115 	stw	ra,4(sp)
   8209c:	2021883a 	mov	r16,r4
   820a0:	00822f00 	call	822f0 <__call_exitprocs>
   820a4:	00800234 	movhi	r2,8
   820a8:	108ade04 	addi	r2,r2,11128
   820ac:	11000017 	ldw	r4,0(r2)
   820b0:	20800f17 	ldw	r2,60(r4)
   820b4:	10000126 	beq	r2,zero,820bc <exit+0x30>
   820b8:	103ee83a 	callr	r2
   820bc:	8009883a 	mov	r4,r16
   820c0:	00824980 	call	82498 <_exit>

000820c4 <memcmp>:
   820c4:	01c000c4 	movi	r7,3
   820c8:	3980192e 	bgeu	r7,r6,82130 <memcmp+0x6c>
   820cc:	2144b03a 	or	r2,r4,r5
   820d0:	11c4703a 	and	r2,r2,r7
   820d4:	10000f26 	beq	r2,zero,82114 <memcmp+0x50>
   820d8:	20800003 	ldbu	r2,0(r4)
   820dc:	28c00003 	ldbu	r3,0(r5)
   820e0:	10c0151e 	bne	r2,r3,82138 <memcmp+0x74>
   820e4:	31bfff84 	addi	r6,r6,-2
   820e8:	01ffffc4 	movi	r7,-1
   820ec:	00000406 	br	82100 <memcmp+0x3c>
   820f0:	20800003 	ldbu	r2,0(r4)
   820f4:	28c00003 	ldbu	r3,0(r5)
   820f8:	31bfffc4 	addi	r6,r6,-1
   820fc:	10c00e1e 	bne	r2,r3,82138 <memcmp+0x74>
   82100:	21000044 	addi	r4,r4,1
   82104:	29400044 	addi	r5,r5,1
   82108:	31fff91e 	bne	r6,r7,820f0 <__alt_data_end+0xfff96260>
   8210c:	0005883a 	mov	r2,zero
   82110:	f800283a 	ret
   82114:	20c00017 	ldw	r3,0(r4)
   82118:	28800017 	ldw	r2,0(r5)
   8211c:	18bfee1e 	bne	r3,r2,820d8 <__alt_data_end+0xfff96248>
   82120:	31bfff04 	addi	r6,r6,-4
   82124:	21000104 	addi	r4,r4,4
   82128:	29400104 	addi	r5,r5,4
   8212c:	39bff936 	bltu	r7,r6,82114 <__alt_data_end+0xfff96284>
   82130:	303fe91e 	bne	r6,zero,820d8 <__alt_data_end+0xfff96248>
   82134:	003ff506 	br	8210c <__alt_data_end+0xfff9627c>
   82138:	10c5c83a 	sub	r2,r2,r3
   8213c:	f800283a 	ret

00082140 <strlen>:
   82140:	208000cc 	andi	r2,r4,3
   82144:	10002026 	beq	r2,zero,821c8 <strlen+0x88>
   82148:	20800007 	ldb	r2,0(r4)
   8214c:	10002026 	beq	r2,zero,821d0 <strlen+0x90>
   82150:	2005883a 	mov	r2,r4
   82154:	00000206 	br	82160 <strlen+0x20>
   82158:	10c00007 	ldb	r3,0(r2)
   8215c:	18001826 	beq	r3,zero,821c0 <strlen+0x80>
   82160:	10800044 	addi	r2,r2,1
   82164:	10c000cc 	andi	r3,r2,3
   82168:	183ffb1e 	bne	r3,zero,82158 <__alt_data_end+0xfff962c8>
   8216c:	10c00017 	ldw	r3,0(r2)
   82170:	01ffbff4 	movhi	r7,65279
   82174:	39ffbfc4 	addi	r7,r7,-257
   82178:	00ca303a 	nor	r5,zero,r3
   8217c:	01a02074 	movhi	r6,32897
   82180:	19c7883a 	add	r3,r3,r7
   82184:	31a02004 	addi	r6,r6,-32640
   82188:	1946703a 	and	r3,r3,r5
   8218c:	1986703a 	and	r3,r3,r6
   82190:	1800091e 	bne	r3,zero,821b8 <strlen+0x78>
   82194:	10800104 	addi	r2,r2,4
   82198:	10c00017 	ldw	r3,0(r2)
   8219c:	19cb883a 	add	r5,r3,r7
   821a0:	00c6303a 	nor	r3,zero,r3
   821a4:	28c6703a 	and	r3,r5,r3
   821a8:	1986703a 	and	r3,r3,r6
   821ac:	183ff926 	beq	r3,zero,82194 <__alt_data_end+0xfff96304>
   821b0:	00000106 	br	821b8 <strlen+0x78>
   821b4:	10800044 	addi	r2,r2,1
   821b8:	10c00007 	ldb	r3,0(r2)
   821bc:	183ffd1e 	bne	r3,zero,821b4 <__alt_data_end+0xfff96324>
   821c0:	1105c83a 	sub	r2,r2,r4
   821c4:	f800283a 	ret
   821c8:	2005883a 	mov	r2,r4
   821cc:	003fe706 	br	8216c <__alt_data_end+0xfff962dc>
   821d0:	0005883a 	mov	r2,zero
   821d4:	f800283a 	ret

000821d8 <__register_exitproc>:
   821d8:	defffa04 	addi	sp,sp,-24
   821dc:	dc000315 	stw	r16,12(sp)
   821e0:	04000234 	movhi	r16,8
   821e4:	840ade04 	addi	r16,r16,11128
   821e8:	80c00017 	ldw	r3,0(r16)
   821ec:	dc400415 	stw	r17,16(sp)
   821f0:	dfc00515 	stw	ra,20(sp)
   821f4:	18805217 	ldw	r2,328(r3)
   821f8:	2023883a 	mov	r17,r4
   821fc:	10003726 	beq	r2,zero,822dc <__register_exitproc+0x104>
   82200:	10c00117 	ldw	r3,4(r2)
   82204:	010007c4 	movi	r4,31
   82208:	20c00e16 	blt	r4,r3,82244 <__register_exitproc+0x6c>
   8220c:	1a000044 	addi	r8,r3,1
   82210:	8800221e 	bne	r17,zero,8229c <__register_exitproc+0xc4>
   82214:	18c00084 	addi	r3,r3,2
   82218:	18c7883a 	add	r3,r3,r3
   8221c:	18c7883a 	add	r3,r3,r3
   82220:	12000115 	stw	r8,4(r2)
   82224:	10c7883a 	add	r3,r2,r3
   82228:	19400015 	stw	r5,0(r3)
   8222c:	0005883a 	mov	r2,zero
   82230:	dfc00517 	ldw	ra,20(sp)
   82234:	dc400417 	ldw	r17,16(sp)
   82238:	dc000317 	ldw	r16,12(sp)
   8223c:	dec00604 	addi	sp,sp,24
   82240:	f800283a 	ret
   82244:	00800034 	movhi	r2,0
   82248:	10800004 	addi	r2,r2,0
   8224c:	10002626 	beq	r2,zero,822e8 <__register_exitproc+0x110>
   82250:	01006404 	movi	r4,400
   82254:	d9400015 	stw	r5,0(sp)
   82258:	d9800115 	stw	r6,4(sp)
   8225c:	d9c00215 	stw	r7,8(sp)
   82260:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   82264:	d9400017 	ldw	r5,0(sp)
   82268:	d9800117 	ldw	r6,4(sp)
   8226c:	d9c00217 	ldw	r7,8(sp)
   82270:	10001d26 	beq	r2,zero,822e8 <__register_exitproc+0x110>
   82274:	81000017 	ldw	r4,0(r16)
   82278:	10000115 	stw	zero,4(r2)
   8227c:	02000044 	movi	r8,1
   82280:	22405217 	ldw	r9,328(r4)
   82284:	0007883a 	mov	r3,zero
   82288:	12400015 	stw	r9,0(r2)
   8228c:	20805215 	stw	r2,328(r4)
   82290:	10006215 	stw	zero,392(r2)
   82294:	10006315 	stw	zero,396(r2)
   82298:	883fde26 	beq	r17,zero,82214 <__alt_data_end+0xfff96384>
   8229c:	18c9883a 	add	r4,r3,r3
   822a0:	2109883a 	add	r4,r4,r4
   822a4:	1109883a 	add	r4,r2,r4
   822a8:	21802215 	stw	r6,136(r4)
   822ac:	01800044 	movi	r6,1
   822b0:	12406217 	ldw	r9,392(r2)
   822b4:	30cc983a 	sll	r6,r6,r3
   822b8:	4992b03a 	or	r9,r9,r6
   822bc:	12406215 	stw	r9,392(r2)
   822c0:	21c04215 	stw	r7,264(r4)
   822c4:	01000084 	movi	r4,2
   822c8:	893fd21e 	bne	r17,r4,82214 <__alt_data_end+0xfff96384>
   822cc:	11006317 	ldw	r4,396(r2)
   822d0:	218cb03a 	or	r6,r4,r6
   822d4:	11806315 	stw	r6,396(r2)
   822d8:	003fce06 	br	82214 <__alt_data_end+0xfff96384>
   822dc:	18805304 	addi	r2,r3,332
   822e0:	18805215 	stw	r2,328(r3)
   822e4:	003fc606 	br	82200 <__alt_data_end+0xfff96370>
   822e8:	00bfffc4 	movi	r2,-1
   822ec:	003fd006 	br	82230 <__alt_data_end+0xfff963a0>

000822f0 <__call_exitprocs>:
   822f0:	defff504 	addi	sp,sp,-44
   822f4:	df000915 	stw	fp,36(sp)
   822f8:	dd400615 	stw	r21,24(sp)
   822fc:	dc800315 	stw	r18,12(sp)
   82300:	dfc00a15 	stw	ra,40(sp)
   82304:	ddc00815 	stw	r23,32(sp)
   82308:	dd800715 	stw	r22,28(sp)
   8230c:	dd000515 	stw	r20,20(sp)
   82310:	dcc00415 	stw	r19,16(sp)
   82314:	dc400215 	stw	r17,8(sp)
   82318:	dc000115 	stw	r16,4(sp)
   8231c:	d9000015 	stw	r4,0(sp)
   82320:	2839883a 	mov	fp,r5
   82324:	04800044 	movi	r18,1
   82328:	057fffc4 	movi	r21,-1
   8232c:	00800234 	movhi	r2,8
   82330:	108ade04 	addi	r2,r2,11128
   82334:	12000017 	ldw	r8,0(r2)
   82338:	45005217 	ldw	r20,328(r8)
   8233c:	44c05204 	addi	r19,r8,328
   82340:	a0001c26 	beq	r20,zero,823b4 <__call_exitprocs+0xc4>
   82344:	a0800117 	ldw	r2,4(r20)
   82348:	15ffffc4 	addi	r23,r2,-1
   8234c:	b8000d16 	blt	r23,zero,82384 <__call_exitprocs+0x94>
   82350:	14000044 	addi	r16,r2,1
   82354:	8421883a 	add	r16,r16,r16
   82358:	8421883a 	add	r16,r16,r16
   8235c:	84402004 	addi	r17,r16,128
   82360:	a463883a 	add	r17,r20,r17
   82364:	a421883a 	add	r16,r20,r16
   82368:	e0001e26 	beq	fp,zero,823e4 <__call_exitprocs+0xf4>
   8236c:	80804017 	ldw	r2,256(r16)
   82370:	e0801c26 	beq	fp,r2,823e4 <__call_exitprocs+0xf4>
   82374:	bdffffc4 	addi	r23,r23,-1
   82378:	843fff04 	addi	r16,r16,-4
   8237c:	8c7fff04 	addi	r17,r17,-4
   82380:	bd7ff91e 	bne	r23,r21,82368 <__alt_data_end+0xfff964d8>
   82384:	00800034 	movhi	r2,0
   82388:	10800004 	addi	r2,r2,0
   8238c:	10000926 	beq	r2,zero,823b4 <__call_exitprocs+0xc4>
   82390:	a0800117 	ldw	r2,4(r20)
   82394:	1000301e 	bne	r2,zero,82458 <__call_exitprocs+0x168>
   82398:	a0800017 	ldw	r2,0(r20)
   8239c:	10003226 	beq	r2,zero,82468 <__call_exitprocs+0x178>
   823a0:	a009883a 	mov	r4,r20
   823a4:	98800015 	stw	r2,0(r19)
   823a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   823ac:	9d000017 	ldw	r20,0(r19)
   823b0:	a03fe41e 	bne	r20,zero,82344 <__alt_data_end+0xfff964b4>
   823b4:	dfc00a17 	ldw	ra,40(sp)
   823b8:	df000917 	ldw	fp,36(sp)
   823bc:	ddc00817 	ldw	r23,32(sp)
   823c0:	dd800717 	ldw	r22,28(sp)
   823c4:	dd400617 	ldw	r21,24(sp)
   823c8:	dd000517 	ldw	r20,20(sp)
   823cc:	dcc00417 	ldw	r19,16(sp)
   823d0:	dc800317 	ldw	r18,12(sp)
   823d4:	dc400217 	ldw	r17,8(sp)
   823d8:	dc000117 	ldw	r16,4(sp)
   823dc:	dec00b04 	addi	sp,sp,44
   823e0:	f800283a 	ret
   823e4:	a0800117 	ldw	r2,4(r20)
   823e8:	80c00017 	ldw	r3,0(r16)
   823ec:	10bfffc4 	addi	r2,r2,-1
   823f0:	15c01426 	beq	r2,r23,82444 <__call_exitprocs+0x154>
   823f4:	80000015 	stw	zero,0(r16)
   823f8:	183fde26 	beq	r3,zero,82374 <__alt_data_end+0xfff964e4>
   823fc:	95c8983a 	sll	r4,r18,r23
   82400:	a0806217 	ldw	r2,392(r20)
   82404:	a5800117 	ldw	r22,4(r20)
   82408:	2084703a 	and	r2,r4,r2
   8240c:	10000b26 	beq	r2,zero,8243c <__call_exitprocs+0x14c>
   82410:	a0806317 	ldw	r2,396(r20)
   82414:	2088703a 	and	r4,r4,r2
   82418:	20000c1e 	bne	r4,zero,8244c <__call_exitprocs+0x15c>
   8241c:	89400017 	ldw	r5,0(r17)
   82420:	d9000017 	ldw	r4,0(sp)
   82424:	183ee83a 	callr	r3
   82428:	a0800117 	ldw	r2,4(r20)
   8242c:	15bfbf1e 	bne	r2,r22,8232c <__alt_data_end+0xfff9649c>
   82430:	98800017 	ldw	r2,0(r19)
   82434:	153fcf26 	beq	r2,r20,82374 <__alt_data_end+0xfff964e4>
   82438:	003fbc06 	br	8232c <__alt_data_end+0xfff9649c>
   8243c:	183ee83a 	callr	r3
   82440:	003ff906 	br	82428 <__alt_data_end+0xfff96598>
   82444:	a5c00115 	stw	r23,4(r20)
   82448:	003feb06 	br	823f8 <__alt_data_end+0xfff96568>
   8244c:	89000017 	ldw	r4,0(r17)
   82450:	183ee83a 	callr	r3
   82454:	003ff406 	br	82428 <__alt_data_end+0xfff96598>
   82458:	a0800017 	ldw	r2,0(r20)
   8245c:	a027883a 	mov	r19,r20
   82460:	1029883a 	mov	r20,r2
   82464:	003fb606 	br	82340 <__alt_data_end+0xfff964b0>
   82468:	0005883a 	mov	r2,zero
   8246c:	003ffb06 	br	8245c <__alt_data_end+0xfff965cc>

00082470 <__mulsi3>:
   82470:	0005883a 	mov	r2,zero
   82474:	20000726 	beq	r4,zero,82494 <__mulsi3+0x24>
   82478:	20c0004c 	andi	r3,r4,1
   8247c:	2008d07a 	srli	r4,r4,1
   82480:	18000126 	beq	r3,zero,82488 <__mulsi3+0x18>
   82484:	1145883a 	add	r2,r2,r5
   82488:	294b883a 	add	r5,r5,r5
   8248c:	203ffa1e 	bne	r4,zero,82478 <__alt_data_end+0xfff965e8>
   82490:	f800283a 	ret
   82494:	f800283a 	ret

00082498 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   82498:	defffd04 	addi	sp,sp,-12
   8249c:	df000215 	stw	fp,8(sp)
   824a0:	df000204 	addi	fp,sp,8
   824a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   824a8:	0001883a 	nop
   824ac:	e0bfff17 	ldw	r2,-4(fp)
   824b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   824b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   824b8:	10000226 	beq	r2,zero,824c4 <_exit+0x2c>
    ALT_SIM_FAIL();
   824bc:	002af070 	cmpltui	zero,zero,43969
   824c0:	00000106 	br	824c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   824c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   824c8:	003fff06 	br	824c8 <__alt_data_end+0xfff96638>
