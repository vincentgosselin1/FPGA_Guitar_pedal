--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_compare 2017:10:25:18:06:53:SJ cbx_lpm_decode 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode4174w[1..0]	: WIRE;
	w_anode4183w[3..0]	: WIRE;
	w_anode4200w[3..0]	: WIRE;
	w_anode4210w[3..0]	: WIRE;
	w_anode4220w[3..0]	: WIRE;
	w_anode4230w[3..0]	: WIRE;
	w_anode4240w[3..0]	: WIRE;
	w_anode4250w[3..0]	: WIRE;
	w_anode4260w[3..0]	: WIRE;
	w_anode4272w[1..0]	: WIRE;
	w_anode4279w[3..0]	: WIRE;
	w_anode4290w[3..0]	: WIRE;
	w_anode4300w[3..0]	: WIRE;
	w_anode4310w[3..0]	: WIRE;
	w_anode4320w[3..0]	: WIRE;
	w_anode4330w[3..0]	: WIRE;
	w_anode4340w[3..0]	: WIRE;
	w_anode4350w[3..0]	: WIRE;
	w_data4172w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode4350w[3..3], w_anode4340w[3..3], w_anode4330w[3..3], w_anode4320w[3..3], w_anode4310w[3..3], w_anode4300w[3..3], w_anode4290w[3..3], w_anode4279w[3..3]), ( w_anode4260w[3..3], w_anode4250w[3..3], w_anode4240w[3..3], w_anode4230w[3..3], w_anode4220w[3..3], w_anode4210w[3..3], w_anode4200w[3..3], w_anode4183w[3..3]));
	w_anode4174w[] = ( (w_anode4174w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode4183w[] = ( (w_anode4183w[2..2] & (! w_data4172w[2..2])), (w_anode4183w[1..1] & (! w_data4172w[1..1])), (w_anode4183w[0..0] & (! w_data4172w[0..0])), w_anode4174w[1..1]);
	w_anode4200w[] = ( (w_anode4200w[2..2] & (! w_data4172w[2..2])), (w_anode4200w[1..1] & (! w_data4172w[1..1])), (w_anode4200w[0..0] & w_data4172w[0..0]), w_anode4174w[1..1]);
	w_anode4210w[] = ( (w_anode4210w[2..2] & (! w_data4172w[2..2])), (w_anode4210w[1..1] & w_data4172w[1..1]), (w_anode4210w[0..0] & (! w_data4172w[0..0])), w_anode4174w[1..1]);
	w_anode4220w[] = ( (w_anode4220w[2..2] & (! w_data4172w[2..2])), (w_anode4220w[1..1] & w_data4172w[1..1]), (w_anode4220w[0..0] & w_data4172w[0..0]), w_anode4174w[1..1]);
	w_anode4230w[] = ( (w_anode4230w[2..2] & w_data4172w[2..2]), (w_anode4230w[1..1] & (! w_data4172w[1..1])), (w_anode4230w[0..0] & (! w_data4172w[0..0])), w_anode4174w[1..1]);
	w_anode4240w[] = ( (w_anode4240w[2..2] & w_data4172w[2..2]), (w_anode4240w[1..1] & (! w_data4172w[1..1])), (w_anode4240w[0..0] & w_data4172w[0..0]), w_anode4174w[1..1]);
	w_anode4250w[] = ( (w_anode4250w[2..2] & w_data4172w[2..2]), (w_anode4250w[1..1] & w_data4172w[1..1]), (w_anode4250w[0..0] & (! w_data4172w[0..0])), w_anode4174w[1..1]);
	w_anode4260w[] = ( (w_anode4260w[2..2] & w_data4172w[2..2]), (w_anode4260w[1..1] & w_data4172w[1..1]), (w_anode4260w[0..0] & w_data4172w[0..0]), w_anode4174w[1..1]);
	w_anode4272w[] = ( (w_anode4272w[0..0] & data_wire[3..3]), enable_wire);
	w_anode4279w[] = ( (w_anode4279w[2..2] & (! w_data4172w[2..2])), (w_anode4279w[1..1] & (! w_data4172w[1..1])), (w_anode4279w[0..0] & (! w_data4172w[0..0])), w_anode4272w[1..1]);
	w_anode4290w[] = ( (w_anode4290w[2..2] & (! w_data4172w[2..2])), (w_anode4290w[1..1] & (! w_data4172w[1..1])), (w_anode4290w[0..0] & w_data4172w[0..0]), w_anode4272w[1..1]);
	w_anode4300w[] = ( (w_anode4300w[2..2] & (! w_data4172w[2..2])), (w_anode4300w[1..1] & w_data4172w[1..1]), (w_anode4300w[0..0] & (! w_data4172w[0..0])), w_anode4272w[1..1]);
	w_anode4310w[] = ( (w_anode4310w[2..2] & (! w_data4172w[2..2])), (w_anode4310w[1..1] & w_data4172w[1..1]), (w_anode4310w[0..0] & w_data4172w[0..0]), w_anode4272w[1..1]);
	w_anode4320w[] = ( (w_anode4320w[2..2] & w_data4172w[2..2]), (w_anode4320w[1..1] & (! w_data4172w[1..1])), (w_anode4320w[0..0] & (! w_data4172w[0..0])), w_anode4272w[1..1]);
	w_anode4330w[] = ( (w_anode4330w[2..2] & w_data4172w[2..2]), (w_anode4330w[1..1] & (! w_data4172w[1..1])), (w_anode4330w[0..0] & w_data4172w[0..0]), w_anode4272w[1..1]);
	w_anode4340w[] = ( (w_anode4340w[2..2] & w_data4172w[2..2]), (w_anode4340w[1..1] & w_data4172w[1..1]), (w_anode4340w[0..0] & (! w_data4172w[0..0])), w_anode4272w[1..1]);
	w_anode4350w[] = ( (w_anode4350w[2..2] & w_data4172w[2..2]), (w_anode4350w[1..1] & w_data4172w[1..1]), (w_anode4350w[0..0] & w_data4172w[0..0]), w_anode4272w[1..1]);
	w_data4172w[2..0] = data_wire[2..0];
END;
--VALID FILE
