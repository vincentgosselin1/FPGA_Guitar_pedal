--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=14 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_compare 2017:10:25:18:06:53:SJ cbx_lpm_decode 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_rma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[13..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[13..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3658w[1..0]	: WIRE;
	w_anode3667w[3..0]	: WIRE;
	w_anode3684w[3..0]	: WIRE;
	w_anode3694w[3..0]	: WIRE;
	w_anode3704w[3..0]	: WIRE;
	w_anode3714w[3..0]	: WIRE;
	w_anode3724w[3..0]	: WIRE;
	w_anode3734w[3..0]	: WIRE;
	w_anode3744w[3..0]	: WIRE;
	w_anode3756w[1..0]	: WIRE;
	w_anode3763w[3..0]	: WIRE;
	w_anode3774w[3..0]	: WIRE;
	w_anode3784w[3..0]	: WIRE;
	w_anode3794w[3..0]	: WIRE;
	w_anode3804w[3..0]	: WIRE;
	w_anode3814w[3..0]	: WIRE;
	w_anode3824w[3..0]	: WIRE;
	w_anode3834w[3..0]	: WIRE;
	w_data3656w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[13..0] = eq_wire[13..0];
	eq_wire[] = ( ( w_anode3834w[3..3], w_anode3824w[3..3], w_anode3814w[3..3], w_anode3804w[3..3], w_anode3794w[3..3], w_anode3784w[3..3], w_anode3774w[3..3], w_anode3763w[3..3]), ( w_anode3744w[3..3], w_anode3734w[3..3], w_anode3724w[3..3], w_anode3714w[3..3], w_anode3704w[3..3], w_anode3694w[3..3], w_anode3684w[3..3], w_anode3667w[3..3]));
	w_anode3658w[] = ( (w_anode3658w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3667w[] = ( (w_anode3667w[2..2] & (! w_data3656w[2..2])), (w_anode3667w[1..1] & (! w_data3656w[1..1])), (w_anode3667w[0..0] & (! w_data3656w[0..0])), w_anode3658w[1..1]);
	w_anode3684w[] = ( (w_anode3684w[2..2] & (! w_data3656w[2..2])), (w_anode3684w[1..1] & (! w_data3656w[1..1])), (w_anode3684w[0..0] & w_data3656w[0..0]), w_anode3658w[1..1]);
	w_anode3694w[] = ( (w_anode3694w[2..2] & (! w_data3656w[2..2])), (w_anode3694w[1..1] & w_data3656w[1..1]), (w_anode3694w[0..0] & (! w_data3656w[0..0])), w_anode3658w[1..1]);
	w_anode3704w[] = ( (w_anode3704w[2..2] & (! w_data3656w[2..2])), (w_anode3704w[1..1] & w_data3656w[1..1]), (w_anode3704w[0..0] & w_data3656w[0..0]), w_anode3658w[1..1]);
	w_anode3714w[] = ( (w_anode3714w[2..2] & w_data3656w[2..2]), (w_anode3714w[1..1] & (! w_data3656w[1..1])), (w_anode3714w[0..0] & (! w_data3656w[0..0])), w_anode3658w[1..1]);
	w_anode3724w[] = ( (w_anode3724w[2..2] & w_data3656w[2..2]), (w_anode3724w[1..1] & (! w_data3656w[1..1])), (w_anode3724w[0..0] & w_data3656w[0..0]), w_anode3658w[1..1]);
	w_anode3734w[] = ( (w_anode3734w[2..2] & w_data3656w[2..2]), (w_anode3734w[1..1] & w_data3656w[1..1]), (w_anode3734w[0..0] & (! w_data3656w[0..0])), w_anode3658w[1..1]);
	w_anode3744w[] = ( (w_anode3744w[2..2] & w_data3656w[2..2]), (w_anode3744w[1..1] & w_data3656w[1..1]), (w_anode3744w[0..0] & w_data3656w[0..0]), w_anode3658w[1..1]);
	w_anode3756w[] = ( (w_anode3756w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3763w[] = ( (w_anode3763w[2..2] & (! w_data3656w[2..2])), (w_anode3763w[1..1] & (! w_data3656w[1..1])), (w_anode3763w[0..0] & (! w_data3656w[0..0])), w_anode3756w[1..1]);
	w_anode3774w[] = ( (w_anode3774w[2..2] & (! w_data3656w[2..2])), (w_anode3774w[1..1] & (! w_data3656w[1..1])), (w_anode3774w[0..0] & w_data3656w[0..0]), w_anode3756w[1..1]);
	w_anode3784w[] = ( (w_anode3784w[2..2] & (! w_data3656w[2..2])), (w_anode3784w[1..1] & w_data3656w[1..1]), (w_anode3784w[0..0] & (! w_data3656w[0..0])), w_anode3756w[1..1]);
	w_anode3794w[] = ( (w_anode3794w[2..2] & (! w_data3656w[2..2])), (w_anode3794w[1..1] & w_data3656w[1..1]), (w_anode3794w[0..0] & w_data3656w[0..0]), w_anode3756w[1..1]);
	w_anode3804w[] = ( (w_anode3804w[2..2] & w_data3656w[2..2]), (w_anode3804w[1..1] & (! w_data3656w[1..1])), (w_anode3804w[0..0] & (! w_data3656w[0..0])), w_anode3756w[1..1]);
	w_anode3814w[] = ( (w_anode3814w[2..2] & w_data3656w[2..2]), (w_anode3814w[1..1] & (! w_data3656w[1..1])), (w_anode3814w[0..0] & w_data3656w[0..0]), w_anode3756w[1..1]);
	w_anode3824w[] = ( (w_anode3824w[2..2] & w_data3656w[2..2]), (w_anode3824w[1..1] & w_data3656w[1..1]), (w_anode3824w[0..0] & (! w_data3656w[0..0])), w_anode3756w[1..1]);
	w_anode3834w[] = ( (w_anode3834w[2..2] & w_data3656w[2..2]), (w_anode3834w[1..1] & w_data3656w[1..1]), (w_anode3834w[0..0] & w_data3656w[0..0]), w_anode3756w[1..1]);
	w_data3656w[2..0] = data_wire[2..0];
END;
--VALID FILE
